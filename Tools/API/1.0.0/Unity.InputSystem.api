// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.XR.GoogleVr
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Daydream Controller")] [UnityEngine.Scripting.Preserve] public class DaydreamController : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl app { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl home { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl recentered { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl recentering { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl volumeDown { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl volumeUp { get; }
        public DaydreamController() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Daydream Headset")] [UnityEngine.Scripting.Preserve] public class DaydreamHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        public DaydreamHMD() {}
    }
}

namespace Unity.XR.Oculus.Input
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"GearVR Controller")] [UnityEngine.Scripting.Preserve] public class GearVRTrackedController : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public GearVRTrackedController() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Headset")] [UnityEngine.Scripting.Preserve] public class OculusHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Button", name = @"isTracked")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Integer", name = @"trackingState")] [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl userPresence { get; }
        public OculusHMD() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Headset (w/ on-headset controls)")] [UnityEngine.Scripting.Preserve] public class OculusHMDExtended : OculusHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        public OculusHMDExtended() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Remote")] [UnityEngine.Scripting.Preserve] public class OculusRemote : UnityEngine.InputSystem.InputDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl start { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        public OculusRemote() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Oculus Touch Controller")] [UnityEngine.Scripting.Preserve] public class OculusTouchController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl start { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control thumbstick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Button", name = @"isTracked")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Integer", name = @"trackingState")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Quaternion", name = @"deviceRotation")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Vector3", name = @"devicePosition")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl triggerTouched { get; }
        public OculusTouchController() {}
        protected override void FinishSetup();
    }

    [UnityEngine.Scripting.Preserve] public class OculusTrackingReference : UnityEngine.InputSystem.TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl isTracked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.IntegerControl trackingState { get; }
        public OculusTrackingReference() {}
        protected override void FinishSetup();
    }
}

namespace Unity.XR.OpenVR
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Handed Vive Tracker")] [UnityEngine.Scripting.Preserve] public class HandedViveTracker : ViveTracker
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primary { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public HandedViveTracker() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Windows MR Controller (OpenVR)")] [UnityEngine.Scripting.Preserve] public class OpenVRControllerWMR : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control joystick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouch { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public OpenVRControllerWMR() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"OpenVR Headset")] [UnityEngine.Scripting.Preserve] public class OpenVRHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeVelocity { get; }
        public OpenVRHMD() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Oculus Touch Controller (OpenVR)")] [UnityEngine.Scripting.Preserve] public class OpenVROculusTouchController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control thumbstick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public OpenVROculusTouchController() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Vive Lighthouse")] [UnityEngine.Scripting.Preserve] public class ViveLighthouse : UnityEngine.InputSystem.TrackedDevice
    {
        public ViveLighthouse() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Vive Tracker")] [UnityEngine.Scripting.Preserve] public class ViveTracker : UnityEngine.InputSystem.TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        public ViveTracker() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Vive Wand")] [UnityEngine.Scripting.Preserve] public class ViveWand : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primary { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control trackpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public ViveWand() {}
        protected override void FinishSetup();
    }
}

namespace UnityEngine.InputSystem
{
    [Layouts.InputControlLayout(stateType = typeof(LowLevel.AccelerometerState))] [UnityEngine.Scripting.Preserve] public class Accelerometer : Sensor
    {
        public Controls.Vector3Control acceleration { get; }
        public static Accelerometer current { get; }
        public Accelerometer() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Ambient Temperature")] [UnityEngine.Scripting.Preserve] public class AmbientTemperatureSensor : Sensor
    {
        [Layouts.InputControl(displayName = @"Ambient Temperature", noisy = true)] public Controls.AxisControl ambientTemperature { get; }
        public static AmbientTemperatureSensor current { get; }
        public AmbientTemperatureSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Attitude", stateType = typeof(LowLevel.AttitudeState))] [UnityEngine.Scripting.Preserve] public class AttitudeSensor : Sensor
    {
        public Controls.QuaternionControl attitude { get; }
        public static AttitudeSensor current { get; }
        public AttitudeSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    public static class CommonUsages
    {
        public static readonly Utilities.InternedString Back;
        public static readonly Utilities.InternedString BatteryStrength;
        public static readonly Utilities.InternedString Cancel;
        public static readonly Utilities.InternedString Forward;
        public static readonly Utilities.InternedString Hatswitch;
        public static readonly Utilities.InternedString HighFreqMotor;
        public static readonly Utilities.InternedString Horizontal;
        public static readonly Utilities.InternedString LeftHand;
        public static readonly Utilities.InternedString LowFreqMotor;
        public static readonly Utilities.InternedString Menu;
        public static readonly Utilities.InternedString Modifier;
        public static readonly Utilities.InternedString Orientation;
        public static readonly Utilities.InternedString Point;
        public static readonly Utilities.InternedString Position;
        public static readonly Utilities.InternedString Pressure;
        public static readonly Utilities.InternedString Primary2DMotion;
        public static readonly Utilities.InternedString PrimaryAction;
        public static readonly Utilities.InternedString PrimaryTrigger;
        public static readonly Utilities.InternedString RightHand;
        public static readonly Utilities.InternedString ScrollHorizontal;
        public static readonly Utilities.InternedString ScrollVertical;
        public static readonly Utilities.InternedString Secondary2DMotion;
        public static readonly Utilities.InternedString SecondaryAction;
        public static readonly Utilities.InternedString SecondaryTrigger;
        public static readonly Utilities.InternedString Submit;
        public static readonly Utilities.InternedString Twist;
        public static readonly Utilities.InternedString Vertical;
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.GamepadState))] [UnityEngine.Scripting.Preserve] public class Gamepad : InputDevice, Haptics.IDualMotorRumble, Haptics.IHaptics
    {
        public Controls.ButtonControl aButton { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<Gamepad> all { get; }
        public Controls.ButtonControl bButton { get; }
        public Controls.ButtonControl buttonEast { get; }
        public Controls.ButtonControl buttonNorth { get; }
        public Controls.ButtonControl buttonSouth { get; }
        public Controls.ButtonControl buttonWest { get; }
        public Controls.ButtonControl circleButton { get; }
        public Controls.ButtonControl crossButton { get; }
        public static Gamepad current { get; }
        public Controls.DpadControl dpad { get; }
        public Controls.ButtonControl this[LowLevel.GamepadButton button] { get; }
        public Controls.ButtonControl leftShoulder { get; }
        public Controls.StickControl leftStick { get; }
        public Controls.ButtonControl leftStickButton { get; }
        public Controls.ButtonControl leftTrigger { get; }
        public Controls.ButtonControl rightShoulder { get; }
        public Controls.StickControl rightStick { get; }
        public Controls.ButtonControl rightStickButton { get; }
        public Controls.ButtonControl rightTrigger { get; }
        public Controls.ButtonControl selectButton { get; }
        public Controls.ButtonControl squareButton { get; }
        public Controls.ButtonControl startButton { get; }
        public Controls.ButtonControl triangleButton { get; }
        public Controls.ButtonControl xButton { get; }
        public Controls.ButtonControl yButton { get; }
        public Gamepad() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnAdded();
        protected override void OnRemoved();
        public virtual void PauseHaptics();
        public virtual void ResetHaptics();
        public virtual void ResumeHaptics();
        public virtual void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    [Layouts.InputControlLayout(displayName = @"Gravity", stateType = typeof(LowLevel.GravityState))] [UnityEngine.Scripting.Preserve] public class GravitySensor : Sensor
    {
        public static GravitySensor current { get; }
        public Controls.Vector3Control gravity { get; }
        public GravitySensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(stateType = typeof(LowLevel.GyroscopeState))] [UnityEngine.Scripting.Preserve] public class Gyroscope : Sensor
    {
        public Controls.Vector3Control angularVelocity { get; }
        public static Gyroscope current { get; }
        public Gyroscope() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Humidity")] [UnityEngine.Scripting.Preserve] public class HumiditySensor : Sensor
    {
        public static HumiditySensor current { get; }
        [Layouts.InputControl(displayName = @"Relative Humidity", noisy = true)] public Controls.AxisControl relativeHumidity { get; }
        public HumiditySensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    public interface IInputActionCollection : System.Collections.Generic.IEnumerable<InputAction>, System.Collections.IEnumerable
    {
        public System.Nullable<InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlScheme> controlSchemes { get; }
        public System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice>> devices { get; set; }
        public bool Contains(InputAction action);
        public void Disable();
        public void Enable();
    }

    [UnityEngine.Scripting.Preserve] public interface IInputInteraction
    {
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }

    [UnityEngine.Scripting.Preserve] public interface IInputInteraction<TValue> : IInputInteraction where TValue : struct, new()
    {
    }

    public sealed class InputAction : System.ICloneable, System.IDisposable
    {
        public event System.Action<InputAction.CallbackContext> canceled;
        public event System.Action<InputAction.CallbackContext> performed;
        public event System.Action<InputAction.CallbackContext> started;
        public InputActionMap actionMap { get; }
        public InputControl activeControl { get; }
        public System.Nullable<InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputBinding> bindings { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControl> controls { get; }
        public bool enabled { get; }
        public string expectedControlType { get; set; }
        public System.Guid id { get; }
        public string interactions { get; }
        public string name { get; }
        public InputActionPhase phase { get; }
        public string processors { get; }
        public bool triggered { get; }
        public InputActionType type { get; }
        public InputAction() {}
        public InputAction(string name = default(string), InputActionType type = InputActionType.Value, string binding = default(string), string interactions = default(string), string processors = default(string), string expectedControlType = default(string)) {}
        public InputAction Clone();
        public void Disable();
        public void Dispose();
        public void Enable();
        public TValue ReadValue<TValue>() where TValue : struct, new();
        public object ReadValueAsObject();
        public override string ToString();
        public struct CallbackContext
        {
            public InputAction action { get; }
            public bool canceled { get; }
            public InputControl control { get; }
            public double duration { get; }
            public IInputInteraction interaction { get; }
            public bool performed { get; }
            public InputActionPhase phase { get; }
            public bool started { get; }
            public double startTime { get; }
            public double time { get; }
            public int valueSizeInBytes { get; }
            public System.Type valueType { get; }
            public TValue ReadValue<TValue>() where TValue : struct, new();
            public void ReadValue(void* buffer, int bufferSize);
            public bool ReadValueAsButton();
            public object ReadValueAsObject();
            public override string ToString();
        }
    }

    public class InputActionAsset : ScriptableObject, IInputActionCollection, System.Collections.Generic.IEnumerable<InputAction>, System.Collections.IEnumerable
    {
        public const string Extension = @"inputactions";
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputActionMap> actionMaps { get; }
        public System.Nullable<InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlScheme> controlSchemes { get; }
        public System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice>> devices { get; set; }
        public bool enabled { get; }
        public InputAction this[string actionNameOrId] { get; }
        public InputActionAsset() {}
        public bool Contains(InputAction action);
        public void Disable();
        public void Enable();
        public InputAction FindAction(System.Guid guid);
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false);
        public InputActionMap FindActionMap(System.Guid id);
        public InputActionMap FindActionMap(string nameOrId, bool throwIfNotFound = false);
        public System.Nullable<InputControlScheme> FindControlScheme(string name);
        public int FindControlSchemeIndex(string name);
        public static InputActionAsset FromJson(string json);
        public System.Collections.Generic.IEnumerator<InputAction> GetEnumerator();
        public void LoadFromJson(string json);
        public string ToJson();
    }

    public enum InputActionChange
    {
        ActionCanceled = 6,
        ActionDisabled = 1,
        ActionEnabled = 0,
        ActionMapDisabled = 3,
        ActionMapEnabled = 2,
        ActionPerformed = 5,
        ActionStarted = 4,
        BoundControlsAboutToChange = 7,
        BoundControlsChanged = 8,
    }

    public sealed class InputActionMap : IInputActionCollection, ISerializationCallbackReceiver, System.Collections.Generic.IEnumerable<InputAction>, System.Collections.IEnumerable, System.ICloneable, System.IDisposable
    {
        public event System.Action<InputAction.CallbackContext> actionTriggered;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputAction> actions { get; }
        public InputActionAsset asset { get; }
        public System.Nullable<InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputBinding> bindings { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlScheme> controlSchemes { get; }
        public System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice>> devices { get; set; }
        public bool enabled { get; }
        public System.Guid id { get; }
        public InputAction this[string actionNameOrId] { get; }
        public string name { get; }
        public InputActionMap() {}
        public InputActionMap(string name) {}
        public InputActionMap Clone();
        public bool Contains(InputAction action);
        public void Disable();
        public void Dispose();
        public void Enable();
        public InputAction FindAction(System.Guid id);
        public InputAction FindAction(string nameOrId, bool throwIfNotFound = false);
        public static InputActionMap[] FromJson(string json);
        public System.Collections.Generic.IEnumerator<InputAction> GetEnumerator();
        public bool IsUsableWithDevice(InputDevice device);
        public void OnAfterDeserialize();
        public void OnBeforeSerialize();
        public string ToJson();
        public static string ToJson(System.Collections.Generic.IEnumerable<InputActionMap> maps);
        public override string ToString();
    }

    public enum InputActionPhase
    {
        Canceled = 4,
        Disabled = 0,
        Performed = 3,
        Started = 2,
        Waiting = 1,
    }

    public struct InputActionProperty : System.IEquatable<InputAction>, System.IEquatable<InputActionProperty>, System.IEquatable<InputActionReference>
    {
        public InputAction action { get; }
        public InputActionReference reference { get; }
        public InputActionProperty(InputAction action) {}
        public InputActionProperty(InputActionReference reference) {}
        public override bool Equals(object obj);
        public bool Equals(InputAction other);
        public bool Equals(InputActionProperty other);
        public bool Equals(InputActionReference other);
        public override int GetHashCode();
        public static bool operator ==(InputActionProperty left, InputActionProperty right);
        public static bool operator !=(InputActionProperty left, InputActionProperty right);
    }

    public static class InputActionRebindingExtensions
    {
        public static int ApplyBindingOverride(this InputActionMap actionMap, InputBinding bindingOverride);
        public static void ApplyBindingOverride(this InputAction action, InputBinding bindingOverride);
        public static void ApplyBindingOverride(this InputAction action, int bindingIndex, string path);
        public static void ApplyBindingOverride(this InputAction action, int bindingIndex, InputBinding bindingOverride);
        public static void ApplyBindingOverride(this InputActionMap actionMap, int bindingIndex, InputBinding bindingOverride);
        public static void ApplyBindingOverride(this InputAction action, string newPath, string group = default(string), string path = default(string));
        public static void ApplyBindingOverrides(this InputActionMap actionMap, System.Collections.Generic.IEnumerable<InputBinding> overrides);
        public static int ApplyBindingOverridesOnMatchingControls(this InputAction action, InputControl control);
        public static int ApplyBindingOverridesOnMatchingControls(this InputActionMap actionMap, InputControl control);
        public static string GetBindingDisplayString(this InputAction action, int bindingIndex, InputBinding.DisplayStringOptions options = );
        public static string GetBindingDisplayString(this InputAction action, InputBinding bindingMask, InputBinding.DisplayStringOptions options = );
        public static string GetBindingDisplayString(this InputAction action, InputBinding.DisplayStringOptions options = , string group = default(string));
        public static string GetBindingDisplayString(this InputAction action, int bindingIndex, out string deviceLayoutName, out string controlPath, InputBinding.DisplayStringOptions options = );
        public static System.Nullable<InputBinding> GetBindingForControl(this InputAction action, InputControl control);
        public static int GetBindingIndex(this InputAction action, InputBinding bindingMask);
        public static int GetBindingIndex(this InputAction action, string group = default(string), string path = default(string));
        public static int GetBindingIndexForControl(this InputAction action, InputControl control);
        public static InputActionRebindingExtensions.RebindingOperation PerformInteractiveRebinding(this InputAction action, int bindingIndex = -1);
        public static void RemoveAllBindingOverrides(this InputAction action);
        public static void RemoveAllBindingOverrides(this InputActionMap actionMap);
        public static void RemoveBindingOverride(this InputAction action, int bindingIndex);
        public static void RemoveBindingOverride(this InputAction action, InputBinding bindingMask);
        public static void RemoveBindingOverrides(this InputActionMap actionMap, System.Collections.Generic.IEnumerable<InputBinding> overrides);
        public sealed class RebindingOperation : System.IDisposable
        {
            public const float kDefaultMagnitudeThreshold = 0.2f;
            public InputAction action { get; }
            public System.Nullable<InputBinding> bindingMask { get; }
            public bool canceled { get; }
            public UnityEngine.InputSystem.InputControlList<InputControl> candidates { get; }
            public bool completed { get; }
            public string expectedControlType { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<float> magnitudes { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<float> scores { get; }
            public InputControl selectedControl { get; }
            public bool started { get; }
            public double startTime { get; }
            public float timeout { get; }
            public RebindingOperation() {}
            public void AddCandidate(InputControl control, float score, float magnitude = -1f);
            public void Cancel();
            public void Complete();
            public void Dispose();
            protected override void Finalize();
            public InputActionRebindingExtensions.RebindingOperation OnApplyBinding(System.Action<InputActionRebindingExtensions.RebindingOperation, string> callback);
            public InputActionRebindingExtensions.RebindingOperation OnCancel(System.Action<InputActionRebindingExtensions.RebindingOperation> callback);
            public InputActionRebindingExtensions.RebindingOperation OnComplete(System.Action<InputActionRebindingExtensions.RebindingOperation> callback);
            public InputActionRebindingExtensions.RebindingOperation OnComputeScore(System.Func<InputControl, LowLevel.InputEventPtr, float> callback);
            public InputActionRebindingExtensions.RebindingOperation OnGeneratePath(System.Func<InputControl, string> callback);
            public InputActionRebindingExtensions.RebindingOperation OnMatchWaitForAnother(float seconds);
            public InputActionRebindingExtensions.RebindingOperation OnPotentialMatch(System.Action<InputActionRebindingExtensions.RebindingOperation> callback);
            public void RemoveCandidate(InputControl control);
            public InputActionRebindingExtensions.RebindingOperation Reset();
            public InputActionRebindingExtensions.RebindingOperation Start();
            public InputActionRebindingExtensions.RebindingOperation WithAction(InputAction action);
            public InputActionRebindingExtensions.RebindingOperation WithBindingGroup(string group);
            public InputActionRebindingExtensions.RebindingOperation WithBindingMask(System.Nullable<InputBinding> bindingMask);
            public InputActionRebindingExtensions.RebindingOperation WithCancelingThrough(string binding);
            public InputActionRebindingExtensions.RebindingOperation WithCancelingThrough(InputControl control);
            public InputActionRebindingExtensions.RebindingOperation WithControlsExcluding(string path);
            public InputActionRebindingExtensions.RebindingOperation WithControlsHavingToMatchPath(string path);
            public InputActionRebindingExtensions.RebindingOperation WithExpectedControlType<TControl>() where TControl : InputControl;
            public InputActionRebindingExtensions.RebindingOperation WithExpectedControlType(string layoutName);
            public InputActionRebindingExtensions.RebindingOperation WithExpectedControlType(System.Type type);
            public InputActionRebindingExtensions.RebindingOperation WithMagnitudeHavingToBeGreaterThan(float magnitude);
            public InputActionRebindingExtensions.RebindingOperation WithMatchingEventsBeingSuppressed(bool value = true);
            public InputActionRebindingExtensions.RebindingOperation WithoutGeneralizingPathOfSelectedControl();
            public InputActionRebindingExtensions.RebindingOperation WithoutIgnoringNoisyControls();
            public InputActionRebindingExtensions.RebindingOperation WithRebindAddingNewBinding(string group = default(string));
            public InputActionRebindingExtensions.RebindingOperation WithTargetBinding(int bindingIndex);
            public InputActionRebindingExtensions.RebindingOperation WithTimeout(float timeInSeconds);
        }
    }

    public class InputActionReference : ScriptableObject
    {
        public InputAction action { get; }
        public InputActionAsset asset { get; }
        public InputActionReference() {}
        public static InputActionReference Create(InputAction action);
        public static InputAction op_Implicit(InputActionReference reference);
        public void Set(InputAction action);
        public void Set(InputActionAsset asset, string mapName, string actionName);
        public InputAction ToInputAction();
        public override string ToString();
    }

    public static class InputActionSetupExtensions
    {
        public static InputAction AddAction(this InputActionMap map, string name, InputActionType type = InputActionType.Value, string binding = default(string), string interactions = default(string), string processors = default(string), string groups = default(string), string expectedControlLayout = default(string));
        public static void AddActionMap(this InputActionAsset asset, InputActionMap map);
        public static InputActionMap AddActionMap(this InputActionAsset asset, string name);
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputAction action, InputBinding binding = default(InputBinding));
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputAction action, InputControl control);
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputActionMap actionMap, InputBinding binding);
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputAction action, string path, string interactions = default(string), string processors = default(string), string groups = default(string));
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputActionMap actionMap, string path, System.Guid action, string interactions = default(string), string groups = default(string));
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputActionMap actionMap, string path, string interactions = default(string), string groups = default(string), string action = default(string));
        public static InputActionSetupExtensions.BindingSyntax AddBinding(this InputActionMap actionMap, string path, InputAction action, string interactions = default(string), string groups = default(string));
        public static InputActionSetupExtensions.CompositeSyntax AddCompositeBinding(this InputAction action, string composite, string interactions = default(string), string processors = default(string));
        public static void AddControlScheme(this InputActionAsset asset, InputControlScheme controlScheme);
        public static InputActionSetupExtensions.ControlSchemeSyntax AddControlScheme(this InputActionAsset asset, string name);
        public static InputActionSetupExtensions.BindingSyntax ChangeBinding(this InputAction action, int index);
        public static InputActionSetupExtensions.BindingSyntax ChangeBinding(this InputAction action, InputBinding match);
        public static InputActionSetupExtensions.BindingSyntax ChangeBindingWithGroup(this InputAction action, string group);
        public static InputActionSetupExtensions.BindingSyntax ChangeBindingWithId(this InputAction action, System.Guid id);
        public static InputActionSetupExtensions.BindingSyntax ChangeBindingWithId(this InputAction action, string id);
        public static InputActionSetupExtensions.BindingSyntax ChangeBindingWithPath(this InputAction action, string path);
        public static InputControlScheme OrWithOptionalDevice(this InputControlScheme scheme, string controlPath);
        public static InputControlScheme OrWithRequiredDevice(this InputControlScheme scheme, string controlPath);
        public static void RemoveAction(this InputAction action);
        public static void RemoveAction(this InputActionAsset asset, string nameOrId);
        public static void RemoveActionMap(this InputActionAsset asset, string nameOrId);
        public static void RemoveActionMap(this InputActionAsset asset, InputActionMap map);
        public static void RemoveControlScheme(this InputActionAsset asset, string name);
        public static void Rename(this InputAction action, string newName);
        public static InputControlScheme WithBindingGroup(this InputControlScheme scheme, string bindingGroup);
        public static InputControlScheme WithOptionalDevice(this InputControlScheme scheme, string controlPath);
        public static InputControlScheme WithRequiredDevice(this InputControlScheme scheme, string controlPath);
        public struct BindingSyntax
        {
            public void Erase();
            public InputActionSetupExtensions.BindingSyntax To(InputBinding binding);
            public InputActionSetupExtensions.BindingSyntax Triggering(InputAction action);
            public InputActionSetupExtensions.BindingSyntax WithGroup(string group);
            public InputActionSetupExtensions.BindingSyntax WithGroups(string groups);
            public InputActionSetupExtensions.BindingSyntax WithInteraction<TInteraction>() where TInteraction : IInputInteraction;
            public InputActionSetupExtensions.BindingSyntax WithInteraction(string interaction);
            public InputActionSetupExtensions.BindingSyntax WithInteractions(string interactions);
            public InputActionSetupExtensions.BindingSyntax WithName(string name);
            public InputActionSetupExtensions.BindingSyntax WithPath(string path);
            public InputActionSetupExtensions.BindingSyntax WithProcessor<TProcessor>();
            public InputActionSetupExtensions.BindingSyntax WithProcessor(string processor);
            public InputActionSetupExtensions.BindingSyntax WithProcessors(string processors);
        }
        public struct CompositeSyntax
        {
            public InputActionSetupExtensions.CompositeSyntax With(string name, string binding, string groups = default(string));
        }
        public struct ControlSchemeSyntax
        {
            public InputControlScheme Done();
            public InputActionSetupExtensions.ControlSchemeSyntax OrWithOptionalDevice<TDevice>() where TDevice : InputDevice;
            public InputActionSetupExtensions.ControlSchemeSyntax OrWithOptionalDevice(string controlPath);
            public InputActionSetupExtensions.ControlSchemeSyntax OrWithRequiredDevice<TDevice>() where TDevice : InputDevice;
            public InputActionSetupExtensions.ControlSchemeSyntax OrWithRequiredDevice(string controlPath);
            public InputActionSetupExtensions.ControlSchemeSyntax WithBindingGroup(string bindingGroup);
            public InputActionSetupExtensions.ControlSchemeSyntax WithOptionalDevice<TDevice>() where TDevice : InputDevice;
            public InputActionSetupExtensions.ControlSchemeSyntax WithOptionalDevice(string controlPath);
            public InputActionSetupExtensions.ControlSchemeSyntax WithRequiredDevice<TDevice>() where TDevice : InputDevice;
            public InputActionSetupExtensions.ControlSchemeSyntax WithRequiredDevice(string controlPath);
        }
    }

    public enum InputActionType
    {
        Button = 1,
        PassThrough = 2,
        Value = 0,
    }

    public struct InputBinding : System.IEquatable<InputBinding>
    {
        public const char Separator = ;;
        public string action { get; set; }
        public string effectiveInteractions { get; }
        public string effectivePath { get; }
        public string effectiveProcessors { get; }
        public string groups { get; set; }
        public System.Guid id { get; set; }
        public string interactions { get; set; }
        public bool isComposite { get; set; }
        public bool isPartOfComposite { get; set; }
        public string name { get; set; }
        public string overrideInteractions { get; set; }
        public string overridePath { get; set; }
        public string overrideProcessors { get; set; }
        public string path { get; set; }
        public string processors { get; set; }
        public InputBinding(string path, string action = default(string), string groups = default(string), string processors = default(string), string interactions = default(string), string name = default(string)) {}
        public override bool Equals(object obj);
        public bool Equals(InputBinding other);
        public override int GetHashCode();
        public string GetNameOfComposite();
        public static InputBinding MaskByGroup(string group);
        public static InputBinding MaskByGroups(params string[] groups);
        public bool Matches(InputBinding binding);
        public static bool operator ==(InputBinding left, InputBinding right);
        public static bool operator !=(InputBinding left, InputBinding right);
        public string ToDisplayString(InputBinding.DisplayStringOptions options = , InputControl control = default(InputControl));
        public string ToDisplayString(out string deviceLayoutName, out string controlPath, InputBinding.DisplayStringOptions options = , InputControl control = default(InputControl));
        public override string ToString();
        [System.Flags] public enum DisplayStringOptions
        {
            DontIncludeInteractions = 4,
            DontOmitDevice = 2,
            DontUseShortDisplayNames = 1,
            IgnoreBindingOverrides = 8,
        }
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputBindingComposite
    {
        public abstract int valueSizeInBytes { get; }
        public abstract System.Type valueType { get; }
        protected InputBindingComposite() {}
        public virtual float EvaluateMagnitude(ref InputBindingCompositeContext context);
        public static string GetExpectedControlLayoutName(string composite, string part);
        public abstract void ReadValue(ref InputBindingCompositeContext context, void* buffer, int bufferSize);
        public abstract object ReadValueAsObject(ref InputBindingCompositeContext context);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputBindingComposite<TValue> : InputBindingComposite where TValue : struct, new()
    {
        public override int valueSizeInBytes { get; }
        public override System.Type valueType { get; }
        protected InputBindingComposite() {}
        public abstract TValue ReadValue(ref InputBindingCompositeContext context);
        public override void ReadValue(ref InputBindingCompositeContext context, void* buffer, int bufferSize);
        public override object ReadValueAsObject(ref InputBindingCompositeContext context);
    }

    public struct InputBindingCompositeContext
    {
        public TValue ReadValue<TValue>(int partNumber) where TValue : struct, System.IComparable<TValue>, new();
        public TValue ReadValue<TValue, TComparer>(int partNumber, TComparer comparer = default(TComparer)) where TValue : struct, new() where TComparer : System.Collections.Generic.IComparer<TValue>;
        public TValue ReadValue<TValue>(int partNumber, out InputControl sourceControl) where TValue : struct, System.IComparable<TValue>, new();
        public TValue ReadValue<TValue, TComparer>(int partNumber, out InputControl sourceControl, TComparer comparer = default(TComparer)) where TValue : struct, new() where TComparer : System.Collections.Generic.IComparer<TValue>;
        public bool ReadValueAsButton(int partNumber);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputControl
    {
        protected LowLevel.InputStateBlock m_StateBlock;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<Utilities.InternedString> aliases { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControl> children { get; }
        protected void* currentStatePtr { get; }
        protected void* defaultStatePtr { get; }
        public InputDevice device { get; }
        public string displayName { get; protected set; }
        public InputControl this[string path] { get; }
        public string layout { get; }
        public string name { get; }
        protected void* noiseMaskPtr { get; }
        public bool noisy { get; }
        public InputControl parent { get; }
        public string path { get; }
        protected void* previousFrameStatePtr { get; }
        public string shortDisplayName { get; protected set; }
        public LowLevel.InputStateBlock stateBlock { get; }
        protected System.UInt32 stateOffsetRelativeToDeviceRoot { get; }
        public bool synthetic { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<Utilities.InternedString> usages { get; }
        public abstract int valueSizeInBytes { get; }
        public abstract System.Type valueType { get; }
        public string variants { get; }
        protected InputControl() {}
        public abstract bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public float EvaluateMagnitude();
        public virtual float EvaluateMagnitude(void* statePtr);
        protected virtual void FinishSetup();
        public TControl GetChildControl<TControl>(string path) where TControl : InputControl;
        public InputControl GetChildControl(string path);
        public abstract object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public abstract object ReadValueFromStateAsObject(void* statePtr);
        public abstract void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
        protected virtual void RefreshConfiguration();
        protected void RefreshConfigurationIfNeeded();
        public override string ToString();
        public TControl TryGetChildControl<TControl>(string path) where TControl : InputControl;
        public InputControl TryGetChildControl(string path);
        public virtual void WriteValueFromBufferIntoState(void* bufferPtr, int bufferSize, void* statePtr);
        public virtual void WriteValueFromObjectIntoState(object value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputControl<TValue> : InputControl where TValue : struct, new()
    {
        public override int valueSizeInBytes { get; }
        public override System.Type valueType { get; }
        protected InputControl() {}
        public override bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public TValue ProcessValue(TValue value);
        public TValue ReadDefaultValue();
        public TValue ReadUnprocessedValue();
        public abstract TValue ReadUnprocessedValueFromState(void* statePtr);
        public TValue ReadValue();
        public override object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public TValue ReadValueFromPreviousFrame();
        public TValue ReadValueFromState(void* statePtr);
        public override object ReadValueFromStateAsObject(void* statePtr);
        public override void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
        public override void WriteValueFromBufferIntoState(void* bufferPtr, int bufferSize, void* statePtr);
        public override void WriteValueFromObjectIntoState(object value, void* statePtr);
        public virtual void WriteValueIntoState(TValue value, void* statePtr);
    }

    public static class InputControlExtensions
    {
        public static void AccumulateValueInEvent(this UnityEngine.InputSystem.InputControl<float> control, void* currentStatePtr, LowLevel.InputEventPtr newState);
        public static bool CheckStateIsAtDefault(this InputControl control);
        public static bool CheckStateIsAtDefault(this InputControl control, void* statePtr, void* maskPtr = default(void*));
        public static bool CheckStateIsAtDefaultIgnoringNoise(this InputControl control);
        public static bool CheckStateIsAtDefaultIgnoringNoise(this InputControl control, void* statePtr);
        public static bool CompareState(this InputControl control, void* statePtr, void* maskPtr = default(void*));
        public static bool CompareState(this InputControl control, void* firstStatePtr, void* secondStatePtr, void* maskPtr = default(void*));
        public static bool CompareStateIgnoringNoise(this InputControl control, void* statePtr);
        public static void CopyState<TState>(this InputDevice device, out TState state) where TState : struct, LowLevel.IInputStateTypeInfo, new();
        public static void CopyState(this InputDevice device, void* buffer, int bufferSizeInBytes);
        public static void FindControlsRecursive<TControl>(this InputControl parent, System.Collections.Generic.IList<TControl> controls, System.Func<TControl, bool> predicate) where TControl : InputControl;
        public static TControl FindInParentChain<TControl>(this InputControl control) where TControl : InputControl;
        public static void* GetStatePtrFromStateEvent(this InputControl control, LowLevel.InputEventPtr eventPtr);
        public static bool HasValueChangeInEvent(this InputControl control, LowLevel.InputEventPtr eventPtr);
        public static bool HasValueChangeInState(this InputControl control, void* statePtr);
        public static bool IsActuated(this InputControl control, float threshold = 0f);
        public static bool IsPressed(this InputControl control, float buttonPressPoint = 0f);
        public static void QueueValueChange<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, TValue value, double time = -1d) where TValue : struct, new();
        public static object ReadDefaultValueAsObject(this InputControl control);
        public static TValue ReadUnprocessedValueFromEvent<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, LowLevel.InputEventPtr eventPtr) where TValue : struct, new();
        public static bool ReadUnprocessedValueFromEvent<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, LowLevel.InputEventPtr inputEvent, out TValue value) where TValue : struct, new();
        public static object ReadValueAsObject(this InputControl control);
        public static TValue ReadValueFromEvent<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, LowLevel.InputEventPtr inputEvent) where TValue : struct, new();
        public static bool ReadValueFromEvent<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, LowLevel.InputEventPtr inputEvent, out TValue value) where TValue : struct, new();
        public static void ReadValueIntoBuffer(this InputControl control, void* buffer, int bufferSize);
        public static void WriteValueFromObjectIntoEvent(this InputControl control, LowLevel.InputEventPtr eventPtr, object value);
        public static void WriteValueIntoEvent<TValue>(this InputControl control, TValue value, LowLevel.InputEventPtr eventPtr) where TValue : struct, new();
        public static void WriteValueIntoEvent<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, TValue value, LowLevel.InputEventPtr eventPtr) where TValue : struct, new();
        public static void WriteValueIntoState(this InputControl control, void* statePtr);
        public static void WriteValueIntoState<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, void* statePtr) where TValue : struct, new();
        public static void WriteValueIntoState<TValue>(this InputControl control, TValue value, void* statePtr) where TValue : struct, new();
        public static void WriteValueIntoState<TValue>(this UnityEngine.InputSystem.InputControl<TValue> control, TValue value, void* statePtr) where TValue : struct, new();
        public static void WriteValueIntoState<TValue, TState>(this UnityEngine.InputSystem.InputControl<TValue> control, TValue value, ref TState state) where TValue : struct, new() where TState : struct, LowLevel.IInputStateTypeInfo, new();
    }

    public enum InputControlLayoutChange
    {
        Added = 0,
        Removed = 1,
        Replaced = 2,
    }

    public struct InputControlList<TControl> : System.Collections.Generic.ICollection<TControl>, System.Collections.Generic.IEnumerable<TControl>, System.Collections.Generic.IList<TControl>, System.Collections.Generic.IReadOnlyCollection<TControl>, System.Collections.Generic.IReadOnlyList<TControl>, System.Collections.IEnumerable, System.IDisposable where TControl : InputControl
    {
        public int Capacity { get; set; }
        public int Count { get; }
        public bool IsReadOnly { get; }
        public TControl this[int index] { get; set; }
        public InputControlList(params TControl[] values) {}
        public InputControlList(System.Collections.Generic.IEnumerable<TControl> values, Unity.Collections.Allocator allocator = Unity.Collections.Allocator.Persistent) {}
        public InputControlList(Unity.Collections.Allocator allocator, int initialCapacity = 0) {}
        public void Add(TControl item);
        public void AddRange(System.Collections.Generic.IEnumerable<TControl> list, int count = -1, int destinationIndex = -1);
        public void AddSlice<TList>(TList list, int count = -1, int destinationIndex = -1, int sourceIndex = 0) where TList : System.Collections.Generic.IReadOnlyList<TControl>;
        public void Clear();
        public bool Contains(TControl item);
        public void CopyTo(TControl[] array, int arrayIndex);
        public void Dispose();
        public System.Collections.Generic.IEnumerator<TControl> GetEnumerator();
        public int IndexOf(TControl item);
        public void Insert(int index, TControl item);
        public bool Remove(TControl item);
        public void RemoveAt(int index);
        public void Sort<TCompare>(int startIndex, int count, TCompare comparer) where TCompare : System.Collections.Generic.IComparer<TControl>;
        public void SwapElements(int index1, int index2);
        public TControl[] ToArray(bool dispose = false);
        public override string ToString();
    }

    public static class InputControlPath
    {
        public const string DoubleWildcard = @"**";
        public const char Separator = /;
        public const string Wildcard = @"*";
        public static string Combine(InputControl parent, string path);
        public static bool Matches(string expected, InputControl control);
        public static bool MatchesPrefix(string expected, InputControl control);
        public static string ToHumanReadableString(string path, InputControlPath.HumanReadableStringOptions options = InputControlPath.HumanReadableStringOptions.None, InputControl control = default(InputControl));
        public static string ToHumanReadableString(string path, out string deviceLayoutName, out string controlPath, InputControlPath.HumanReadableStringOptions options = InputControlPath.HumanReadableStringOptions.None, InputControl control = default(InputControl));
        public static TControl TryFindChild<TControl>(InputControl control, string path, int indexInPath = 0) where TControl : InputControl;
        public static InputControl TryFindChild(InputControl control, string path, int indexInPath = 0);
        public static TControl TryFindControl<TControl>(InputControl control, string path, int indexInPath = 0) where TControl : InputControl;
        public static InputControl TryFindControl(InputControl control, string path, int indexInPath = 0);
        public static InputControl[] TryFindControls(InputControl control, string path, int indexInPath = 0);
        public static int TryFindControls<TControl>(InputControl control, string path, int indexInPath, ref UnityEngine.InputSystem.InputControlList<TControl> matches) where TControl : InputControl;
        public static int TryFindControls(InputControl control, string path, ref UnityEngine.InputSystem.InputControlList<InputControl> matches, int indexInPath = 0);
        public static string TryGetControlLayout(string path);
        public static string TryGetDeviceLayout(string path);
        public static string[] TryGetDeviceUsages(string path);
        [System.Flags] public enum HumanReadableStringOptions
        {
            None = 0,
            OmitDevice = 2,
            UseShortNames = 4,
        }
    }

    public struct InputControlScheme : System.IEquatable<InputControlScheme>
    {
        public string bindingGroup { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlScheme.DeviceRequirement> deviceRequirements { get; }
        public string name { get; }
        public InputControlScheme(string name, System.Collections.Generic.IEnumerable<InputControlScheme.DeviceRequirement> devices = default(System.Collections.Generic.IEnumerable<InputControlScheme.DeviceRequirement>), string bindingGroup = default(string)) {}
        public override bool Equals(object obj);
        public bool Equals(InputControlScheme other);
        public static System.Nullable<InputControlScheme> FindControlSchemeForDevice<TSchemes>(InputDevice device, TSchemes schemes) where TSchemes : System.Collections.Generic.IEnumerable<InputControlScheme>;
        public static System.Nullable<InputControlScheme> FindControlSchemeForDevices<TDevices, TSchemes>(TDevices devices, TSchemes schemes, InputDevice mustIncludeDevice = default(InputDevice), bool allowUnsuccesfulMatch = false) where TDevices : System.Collections.Generic.IReadOnlyList<InputDevice> where TSchemes : System.Collections.Generic.IEnumerable<InputControlScheme>;
        public static bool FindControlSchemeForDevices<TDevices, TSchemes>(TDevices devices, TSchemes schemes, out InputControlScheme controlScheme, out InputControlScheme.MatchResult matchResult, InputDevice mustIncludeDevice = default(InputDevice), bool allowUnsuccessfulMatch = false) where TDevices : System.Collections.Generic.IReadOnlyList<InputDevice> where TSchemes : System.Collections.Generic.IEnumerable<InputControlScheme>;
        public override int GetHashCode();
        public static bool operator ==(InputControlScheme left, InputControlScheme right);
        public static bool operator !=(InputControlScheme left, InputControlScheme right);
        public InputControlScheme.MatchResult PickDevicesFrom<TDevices>(TDevices devices, InputDevice favorDevice = default(InputDevice)) where TDevices : System.Collections.Generic.IReadOnlyList<InputDevice>;
        public bool SupportsDevice(InputDevice device);
        public override string ToString();
        public struct DeviceRequirement : System.IEquatable<InputControlScheme.DeviceRequirement>
        {
            public string controlPath { get; set; }
            public bool isAND { get; set; }
            public bool isOptional { get; set; }
            public bool isOR { get; set; }
            public override bool Equals(object obj);
            public bool Equals(InputControlScheme.DeviceRequirement other);
            public override int GetHashCode();
            public static bool operator ==(InputControlScheme.DeviceRequirement left, InputControlScheme.DeviceRequirement right);
            public static bool operator !=(InputControlScheme.DeviceRequirement left, InputControlScheme.DeviceRequirement right);
            public override string ToString();
        }
        public struct MatchResult : System.Collections.Generic.IEnumerable<InputControlScheme.MatchResult.Match>, System.Collections.IEnumerable, System.IDisposable
        {
            public UnityEngine.InputSystem.InputControlList<InputDevice> devices { get; }
            public bool hasMissingOptionalDevices { get; }
            public bool hasMissingRequiredDevices { get; }
            public bool isSuccessfulMatch { get; }
            public InputControlScheme.MatchResult.Match this[int index] { get; }
            public float score { get; }
            public void Dispose();
            public System.Collections.Generic.IEnumerator<InputControlScheme.MatchResult.Match> GetEnumerator();
            public struct Match
            {
                public InputControl control { get; }
                public InputDevice device { get; }
                public bool isOptional { get; }
                public InputControlScheme.DeviceRequirement requirement { get; }
                public int requirementIndex { get; }
            }
        }
    }

    [UnityEngine.Scripting.Preserve] public class InputDevice : InputControl
    {
        public const int InvalidDeviceId = 0;
        public bool added { get; }
        [System.Obsolete(@"Use 'InputSystem.devices' instead. (UnityUpgradable) -> InputSystem.devices", false)] public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> all { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControl> allControls { get; }
        public bool canRunInBackground { get; }
        public Layouts.InputDeviceDescription description { get; }
        public int deviceId { get; }
        public bool enabled { get; }
        public double lastUpdateTime { get; }
        public bool native { get; }
        public bool remote { get; }
        public bool updateBeforeRender { get; }
        public override int valueSizeInBytes { get; }
        public override System.Type valueType { get; }
        public bool wasUpdatedThisFrame { get; }
        public InputDevice() {}
        public override bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public long ExecuteCommand<TCommand>(ref TCommand command) where TCommand : struct, LowLevel.IInputDeviceCommandInfo, new();
        public virtual void MakeCurrent();
        protected virtual void OnAdded();
        protected virtual void OnRemoved();
        public override object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public override object ReadValueFromStateAsObject(void* statePtr);
        public override void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
    }

    public enum InputDeviceChange
    {
        Added = 0,
        ConfigurationChanged = 7,
        Destroyed = 8,
        Disabled = 5,
        Disconnected = 2,
        Enabled = 4,
        Reconnected = 3,
        Removed = 1,
        UsageChanged = 6,
    }

    public static class InputExtensions
    {
        public static bool IsActive(this TouchPhase phase);
        public static bool IsEndedOrCanceled(this TouchPhase phase);
        public static bool IsModifierKey(this Key key);
        public static bool IsTextInputKey(this Key key);
    }

    public struct InputInteractionContext
    {
        public InputAction action { get; }
        public InputControl control { get; }
        public bool isStarted { get; }
        public bool isWaiting { get; }
        public InputActionPhase phase { get; }
        public double startTime { get; }
        public double time { get; }
        public bool timerHasExpired { get; }
        public void Canceled();
        public bool ControlIsActuated(float threshold = 0f);
        public void Performed();
        public void PerformedAndStayPerformed();
        public void PerformedAndStayStarted();
        public TValue ReadValue<TValue>() where TValue : struct, new();
        public void SetTimeout(float seconds);
        public void Started();
        public void Waiting();
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputProcessor
    {
        protected InputProcessor() {}
        public abstract void Process(void* buffer, int bufferSize, InputControl control);
        public abstract object ProcessAsObject(object value, InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputProcessor<TValue> : InputProcessor where TValue : struct, new()
    {
        protected InputProcessor() {}
        public abstract TValue Process(TValue value, InputControl control);
        public override void Process(void* buffer, int bufferSize, InputControl control);
        public override object ProcessAsObject(object value, InputControl control);
    }

    public sealed class InputRemoting : System.IObservable<InputRemoting.Message>, System.IObserver<InputRemoting.Message>
    {
        public bool sending { get; }
        public void RemoveRemoteDevices(int participantId);
        public void StartSending();
        public void StopSending();
        public System.IDisposable Subscribe(System.IObserver<InputRemoting.Message> observer);
        public struct Message
        {
            public byte[] data;
            public int participantId;
            public InputRemoting.MessageType type;
        }
        public enum MessageType
        {
            ChangeUsages = 7,
            Connect = 0,
            Disconnect = 1,
            NewDevice = 3,
            NewEvents = 4,
            NewLayout = 2,
            RemoveDevice = 5,
            RemoveLayout = 6,
            StartSending = 8,
            StopSending = 9,
        }
    }

    public class InputSettings : ScriptableObject
    {
        public bool compensateForScreenOrientation { get; set; }
        public float defaultButtonPressPoint { get; set; }
        public float defaultDeadzoneMax { get; set; }
        public float defaultDeadzoneMin { get; set; }
        public float defaultHoldTime { get; set; }
        public float defaultSlowTapTime { get; set; }
        public float defaultTapTime { get; set; }
        public bool filterNoiseOnCurrent { get; set; }
        public float multiTapDelayTime { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<string> supportedDevices { get; set; }
        public float tapRadius { get; set; }
        public InputSettings.UpdateMode updateMode { get; set; }
        public InputSettings() {}
        public enum UpdateMode
        {
            ProcessEventsInDynamicUpdate = 1,
            ProcessEventsInFixedUpdate = 2,
            ProcessEventsManually = 3,
        }
    }

    [UnityEditor.InitializeOnLoad] public static class InputSystem
    {
        public static event System.Action<object, InputActionChange> onActionChange;
        public static event System.Action onAfterUpdate;
        public static event System.Action onBeforeUpdate;
        public static event System.Action<InputDevice, InputDeviceChange> onDeviceChange;
        public static event LowLevel.InputDeviceCommandDelegate onDeviceCommand;
        public static event System.Action<LowLevel.InputEventPtr, InputDevice> onEvent;
        public static event Layouts.InputDeviceFindControlLayoutDelegate onFindLayoutForDevice;
        public static event System.Action<string, InputControlLayoutChange> onLayoutChange;
        public static event System.Action onSettingsChange;
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> devices { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> disconnectedDevices { get; }
        public static LowLevel.InputMetrics metrics { get; }
        public static float pollingFrequency { get; set; }
        public static InputRemoting remoting { get; }
        public static InputSettings settings { get; set; }
        public static System.Version version { get; }
        public static void AddDevice(InputDevice device);
        public static TDevice AddDevice<TDevice>(string name = default(string)) where TDevice : InputDevice;
        public static InputDevice AddDevice(Layouts.InputDeviceDescription description);
        public static InputDevice AddDevice(string layout, string name = default(string), string variants = default(string));
        public static void AddDeviceUsage(InputDevice device, string usage);
        public static void AddDeviceUsage(InputDevice device, Utilities.InternedString usage);
        public static void DisableAllEnabledActions();
        public static void DisableDevice(InputDevice device);
        public static void EnableDevice(InputDevice device);
        public static InputControl FindControl(string path);
        public static UnityEngine.InputSystem.InputControlList<TControl> FindControls<TControl>(string path) where TControl : InputControl;
        public static UnityEngine.InputSystem.InputControlList<InputControl> FindControls(string path);
        public static int FindControls<TControl>(string path, ref UnityEngine.InputSystem.InputControlList<TControl> controls) where TControl : InputControl;
        public static void FlushDisconnectedDevices();
        public static TDevice GetDevice<TDevice>() where TDevice : InputDevice;
        public static TDevice GetDevice<TDevice>(string usage) where TDevice : InputDevice;
        public static TDevice GetDevice<TDevice>(Utilities.InternedString usage) where TDevice : InputDevice;
        public static InputDevice GetDevice(string nameOrLayout);
        public static InputDevice GetDeviceById(int deviceId);
        public static string GetNameOfBaseLayout(string layoutName);
        public static System.Collections.Generic.List<Layouts.InputDeviceDescription> GetUnsupportedDevices();
        public static int GetUnsupportedDevices(System.Collections.Generic.List<Layouts.InputDeviceDescription> descriptions);
        public static bool IsFirstLayoutBasedOnSecond(string firstLayoutName, string secondLayoutName);
        public static System.Collections.Generic.List<InputAction> ListEnabledActions();
        public static int ListEnabledActions(System.Collections.Generic.List<InputAction> actions);
        public static System.Collections.Generic.IEnumerable<string> ListInteractions();
        public static System.Collections.Generic.IEnumerable<string> ListLayouts();
        public static System.Collections.Generic.IEnumerable<string> ListLayoutsBasedOn(string baseLayout);
        public static System.Collections.Generic.IEnumerable<string> ListProcessors();
        public static Layouts.InputControlLayout LoadLayout<TControl>() where TControl : InputControl;
        public static Layouts.InputControlLayout LoadLayout(string name);
        public static void PauseHaptics();
        public static void QueueConfigChangeEvent(InputDevice device, double time = -1d);
        public static void QueueDeltaStateEvent<TDelta>(InputControl control, TDelta delta, double time = -1d) where TDelta : struct, new();
        public static void QueueEvent<TEvent>(ref TEvent inputEvent) where TEvent : struct, LowLevel.IInputEventTypeInfo, new();
        public static void QueueEvent(LowLevel.InputEventPtr eventPtr);
        public static void QueueStateEvent<TState>(InputDevice device, TState state, double time = -1d) where TState : struct, LowLevel.IInputStateTypeInfo, new();
        public static void QueueTextEvent(InputDevice device, char character, double time = -1d);
        public static void RegisterBindingComposite<T>(string name = default(string));
        public static void RegisterBindingComposite(System.Type type, string name);
        public static void RegisterInteraction<T>(string name = default(string));
        public static void RegisterInteraction(System.Type type, string name = default(string));
        public static void RegisterLayout<T>(string name = default(string), System.Nullable<Layouts.InputDeviceMatcher> matches = default(System.Nullable<Layouts.InputDeviceMatcher>)) where T : InputControl;
        public static void RegisterLayout(string json, string name = default(string), System.Nullable<Layouts.InputDeviceMatcher> matches = default(System.Nullable<Layouts.InputDeviceMatcher>));
        public static void RegisterLayout(System.Type type, string name = default(string), System.Nullable<Layouts.InputDeviceMatcher> matches = default(System.Nullable<Layouts.InputDeviceMatcher>));
        public static void RegisterLayoutBuilder(System.Func<Layouts.InputControlLayout> buildMethod, string name, string baseLayout = default(string), System.Nullable<Layouts.InputDeviceMatcher> matches = default(System.Nullable<Layouts.InputDeviceMatcher>));
        public static void RegisterLayoutMatcher<TDevice>(Layouts.InputDeviceMatcher matcher) where TDevice : InputDevice;
        public static void RegisterLayoutMatcher(string layoutName, Layouts.InputDeviceMatcher matcher);
        public static void RegisterLayoutOverride(string json, string name = default(string));
        public static void RegisterProcessor<T>(string name = default(string));
        public static void RegisterProcessor(System.Type type, string name = default(string));
        public static void RemoveDevice(InputDevice device);
        public static void RemoveDeviceUsage(InputDevice device, string usage);
        public static void RemoveDeviceUsage(InputDevice device, Utilities.InternedString usage);
        public static void RemoveLayout(string name);
        public static void ResetHaptics();
        public static void ResumeHaptics();
        public static void SetDeviceUsage(InputDevice device, string usage);
        public static void SetDeviceUsage(InputDevice device, Utilities.InternedString usage);
        public static string TryFindMatchingLayout(Layouts.InputDeviceDescription deviceDescription);
        public static System.Type TryGetBindingComposite(string name);
        public static System.Type TryGetInteraction(string name);
        public static System.Type TryGetProcessor(string name);
        public static bool TryResetDevice(InputDevice device);
        public static bool TrySyncDevice(InputDevice device);
        public static void Update();
    }

    public class InputValue
    {
        public bool isPressed { get; }
        public InputValue() {}
        public object Get();
        public TValue Get<TValue>() where TValue : struct, new();
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.JoystickState))] [UnityEngine.Scripting.Preserve] public class Joystick : InputDevice
    {
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<Joystick> all { get; }
        public static Joystick current { get; }
        public Controls.Vector2Control hatswitch { get; }
        public Controls.StickControl stick { get; }
        public Controls.ButtonControl trigger { get; }
        public Controls.AxisControl twist { get; }
        public Joystick() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnAdded();
        protected override void OnRemoved();
    }

    public enum Key
    {
        A = 15,
        AltGr = 54,
        B = 16,
        Backquote = 4,
        Backslash = 10,
        Backspace = 65,
        C = 17,
        CapsLock = 72,
        Comma = 7,
        ContextMenu = 59,
        D = 18,
        Delete = 71,
        Digit0 = 50,
        Digit1 = 41,
        Digit2 = 42,
        Digit3 = 43,
        Digit4 = 44,
        Digit5 = 45,
        Digit6 = 46,
        Digit7 = 47,
        Digit8 = 48,
        Digit9 = 49,
        DownArrow = 64,
        E = 19,
        End = 69,
        Enter = 2,
        Equals = 14,
        Escape = 60,
        F = 20,
        F1 = 94,
        F10 = 103,
        F11 = 104,
        F12 = 105,
        F2 = 95,
        F3 = 96,
        F4 = 97,
        F5 = 98,
        F6 = 99,
        F7 = 100,
        F8 = 101,
        F9 = 102,
        G = 21,
        H = 22,
        Home = 68,
        I = 23,
        IMESelected = 111,
        Insert = 70,
        J = 24,
        K = 25,
        L = 26,
        LeftAlt = 53,
        LeftApple = 57,
        LeftArrow = 61,
        LeftBracket = 11,
        LeftCommand = 57,
        LeftCtrl = 55,
        LeftMeta = 57,
        LeftShift = 51,
        LeftWindows = 57,
        M = 27,
        Minus = 13,
        N = 28,
        None = 0,
        NumLock = 73,
        Numpad0 = 84,
        Numpad1 = 85,
        Numpad2 = 86,
        Numpad3 = 87,
        Numpad4 = 88,
        Numpad5 = 89,
        Numpad6 = 90,
        Numpad7 = 91,
        Numpad8 = 92,
        Numpad9 = 93,
        NumpadDivide = 78,
        NumpadEnter = 77,
        NumpadEquals = 83,
        NumpadMinus = 81,
        NumpadMultiply = 79,
        NumpadPeriod = 82,
        NumpadPlus = 80,
        O = 29,
        OEM1 = 106,
        OEM2 = 107,
        OEM3 = 108,
        OEM4 = 109,
        OEM5 = 110,
        P = 30,
        PageDown = 66,
        PageUp = 67,
        Pause = 76,
        Period = 8,
        PrintScreen = 74,
        Q = 31,
        Quote = 5,
        R = 32,
        RightAlt = 54,
        RightApple = 58,
        RightArrow = 62,
        RightBracket = 12,
        RightCommand = 58,
        RightCtrl = 56,
        RightMeta = 58,
        RightShift = 52,
        RightWindows = 58,
        S = 33,
        ScrollLock = 75,
        Semicolon = 6,
        Slash = 9,
        Space = 1,
        T = 34,
        Tab = 3,
        U = 35,
        UpArrow = 63,
        V = 36,
        W = 37,
        X = 38,
        Y = 39,
        Z = 40,
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.KeyboardState))] [UnityEngine.Scripting.Preserve] public class Keyboard : InputDevice, LowLevel.ITextInputReceiver
    {
        public const int KeyCount = 110;
        public event System.Action<LowLevel.IMECompositionString> onIMECompositionChange;
        public event System.Action<char> onTextInput;
        public Controls.KeyControl aKey { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<Controls.KeyControl> allKeys { get; }
        public Controls.ButtonControl altKey { get; }
        public Controls.AnyKeyControl anyKey { get; }
        public Controls.KeyControl backquoteKey { get; }
        public Controls.KeyControl backslashKey { get; }
        public Controls.KeyControl backspaceKey { get; }
        public Controls.KeyControl bKey { get; }
        public Controls.KeyControl capsLockKey { get; }
        public Controls.KeyControl cKey { get; }
        public Controls.KeyControl commaKey { get; }
        public Controls.KeyControl contextMenuKey { get; }
        public Controls.ButtonControl ctrlKey { get; }
        public static Keyboard current { get; }
        public Controls.KeyControl deleteKey { get; }
        public Controls.KeyControl digit0Key { get; }
        public Controls.KeyControl digit1Key { get; }
        public Controls.KeyControl digit2Key { get; }
        public Controls.KeyControl digit3Key { get; }
        public Controls.KeyControl digit4Key { get; }
        public Controls.KeyControl digit5Key { get; }
        public Controls.KeyControl digit6Key { get; }
        public Controls.KeyControl digit7Key { get; }
        public Controls.KeyControl digit8Key { get; }
        public Controls.KeyControl digit9Key { get; }
        public Controls.KeyControl dKey { get; }
        public Controls.KeyControl downArrowKey { get; }
        public Controls.KeyControl eKey { get; }
        public Controls.KeyControl endKey { get; }
        public Controls.KeyControl enterKey { get; }
        public Controls.KeyControl equalsKey { get; }
        public Controls.KeyControl escapeKey { get; }
        public Controls.KeyControl f10Key { get; }
        public Controls.KeyControl f11Key { get; }
        public Controls.KeyControl f12Key { get; }
        public Controls.KeyControl f1Key { get; }
        public Controls.KeyControl f2Key { get; }
        public Controls.KeyControl f3Key { get; }
        public Controls.KeyControl f4Key { get; }
        public Controls.KeyControl f5Key { get; }
        public Controls.KeyControl f6Key { get; }
        public Controls.KeyControl f7Key { get; }
        public Controls.KeyControl f8Key { get; }
        public Controls.KeyControl f9Key { get; }
        public Controls.KeyControl fKey { get; }
        public Controls.KeyControl gKey { get; }
        public Controls.KeyControl hKey { get; }
        public Controls.KeyControl homeKey { get; }
        public Controls.KeyControl iKey { get; }
        public Controls.ButtonControl imeSelected { get; }
        public Controls.KeyControl insertKey { get; }
        public Controls.KeyControl this[Key key] { get; }
        public Controls.KeyControl jKey { get; }
        public string keyboardLayout { get; protected set; }
        public Controls.KeyControl kKey { get; }
        public Controls.KeyControl leftAltKey { get; }
        public Controls.KeyControl leftAppleKey { get; }
        public Controls.KeyControl leftArrowKey { get; }
        public Controls.KeyControl leftBracketKey { get; }
        public Controls.KeyControl leftCommandKey { get; }
        public Controls.KeyControl leftCtrlKey { get; }
        public Controls.KeyControl leftMetaKey { get; }
        public Controls.KeyControl leftShiftKey { get; }
        public Controls.KeyControl leftWindowsKey { get; }
        public Controls.KeyControl lKey { get; }
        public Controls.KeyControl minusKey { get; }
        public Controls.KeyControl mKey { get; }
        public Controls.KeyControl nKey { get; }
        public Controls.KeyControl numLockKey { get; }
        public Controls.KeyControl numpad0Key { get; }
        public Controls.KeyControl numpad1Key { get; }
        public Controls.KeyControl numpad2Key { get; }
        public Controls.KeyControl numpad3Key { get; }
        public Controls.KeyControl numpad4Key { get; }
        public Controls.KeyControl numpad5Key { get; }
        public Controls.KeyControl numpad6Key { get; }
        public Controls.KeyControl numpad7Key { get; }
        public Controls.KeyControl numpad8Key { get; }
        public Controls.KeyControl numpad9Key { get; }
        public Controls.KeyControl numpadDivideKey { get; }
        public Controls.KeyControl numpadEnterKey { get; }
        public Controls.KeyControl numpadEqualsKey { get; }
        public Controls.KeyControl numpadMinusKey { get; }
        public Controls.KeyControl numpadMultiplyKey { get; }
        public Controls.KeyControl numpadPeriodKey { get; }
        public Controls.KeyControl numpadPlusKey { get; }
        public Controls.KeyControl oem1Key { get; }
        public Controls.KeyControl oem2Key { get; }
        public Controls.KeyControl oem3Key { get; }
        public Controls.KeyControl oem4Key { get; }
        public Controls.KeyControl oem5Key { get; }
        public Controls.KeyControl oKey { get; }
        public Controls.KeyControl pageDownKey { get; }
        public Controls.KeyControl pageUpKey { get; }
        public Controls.KeyControl pauseKey { get; }
        public Controls.KeyControl periodKey { get; }
        public Controls.KeyControl pKey { get; }
        public Controls.KeyControl printScreenKey { get; }
        public Controls.KeyControl qKey { get; }
        public Controls.KeyControl quoteKey { get; }
        public Controls.KeyControl rightAltKey { get; }
        public Controls.KeyControl rightAppleKey { get; }
        public Controls.KeyControl rightArrowKey { get; }
        public Controls.KeyControl rightBracketKey { get; }
        public Controls.KeyControl rightCommandKey { get; }
        public Controls.KeyControl rightCtrlKey { get; }
        public Controls.KeyControl rightMetaKey { get; }
        public Controls.KeyControl rightShiftKey { get; }
        public Controls.KeyControl rightWindowsKey { get; }
        public Controls.KeyControl rKey { get; }
        public Controls.KeyControl scrollLockKey { get; }
        public Controls.KeyControl semicolonKey { get; }
        public Controls.ButtonControl shiftKey { get; }
        public Controls.KeyControl sKey { get; }
        public Controls.KeyControl slashKey { get; }
        public Controls.KeyControl spaceKey { get; }
        public Controls.KeyControl tabKey { get; }
        public Controls.KeyControl tKey { get; }
        public Controls.KeyControl uKey { get; }
        public Controls.KeyControl upArrowKey { get; }
        public Controls.KeyControl vKey { get; }
        public Controls.KeyControl wKey { get; }
        public Controls.KeyControl xKey { get; }
        public Controls.KeyControl yKey { get; }
        public Controls.KeyControl zKey { get; }
        public Keyboard() {}
        public Controls.KeyControl FindKeyOnCurrentKeyboardLayout(string displayName);
        protected override void FinishSetup();
        public override void MakeCurrent();
        public void OnIMECompositionChanged(LowLevel.IMECompositionString compositionString);
        protected override void OnRemoved();
        public void OnTextInput(char character);
        protected override void RefreshConfiguration();
        public void SetIMECursorPosition(Vector2 position);
        public void SetIMEEnabled(bool enabled);
    }

    [Layouts.InputControlLayout(displayName = @"Light")] [UnityEngine.Scripting.Preserve] public class LightSensor : Sensor
    {
        public static LightSensor current { get; }
        [Layouts.InputControl(displayName = @"Light Level", noisy = true)] public Controls.AxisControl lightLevel { get; }
        public LightSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Linear Acceleration", stateType = typeof(LowLevel.LinearAccelerationState))] [UnityEngine.Scripting.Preserve] public class LinearAccelerationSensor : Sensor
    {
        public Controls.Vector3Control acceleration { get; }
        public static LinearAccelerationSensor current { get; }
        public LinearAccelerationSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Magnetic Field")] [UnityEngine.Scripting.Preserve] public class MagneticFieldSensor : Sensor
    {
        public static MagneticFieldSensor current { get; }
        [Layouts.InputControl(displayName = @"Magnetic Field", noisy = true)] public Controls.Vector3Control magneticField { get; }
        public MagneticFieldSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.MouseState))] [UnityEngine.Scripting.Preserve] public class Mouse : Pointer, LowLevel.IInputStateCallbackReceiver
    {
        public Controls.ButtonControl backButton { get; }
        public Controls.IntegerControl clickCount { get; }
        public static Mouse current { get; }
        public Controls.ButtonControl forwardButton { get; }
        public Controls.ButtonControl leftButton { get; }
        public Controls.ButtonControl middleButton { get; }
        public Controls.ButtonControl rightButton { get; }
        public Controls.Vector2Control scroll { get; }
        public Mouse() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnAdded();
        protected void OnNextUpdate();
        protected override void OnRemoved();
        protected void OnStateEvent(LowLevel.InputEventPtr eventPtr);
        public void WarpCursorPosition(Vector2 position);
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.PenState))] [UnityEngine.Scripting.Preserve] public class Pen : Pointer
    {
        public static Pen current { get; }
        public Controls.ButtonControl eraser { get; }
        public Controls.ButtonControl firstBarrelButton { get; }
        public Controls.ButtonControl fourthBarrelButton { get; }
        public Controls.ButtonControl inRange { get; }
        public Controls.ButtonControl this[PenButton button] { get; }
        public Controls.ButtonControl secondBarrelButton { get; }
        public Controls.ButtonControl thirdBarrelButton { get; }
        public Controls.Vector2Control tilt { get; }
        public Controls.ButtonControl tip { get; }
        public Controls.AxisControl twist { get; }
        public Pen() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    public enum PenButton
    {
        Barrel1 = 2,
        Barrel2 = 3,
        Barrel3 = 5,
        Barrel4 = 6,
        BarrelFirst = 2,
        BarrelFourth = 6,
        BarrelSecond = 3,
        BarrelThird = 5,
        Eraser = 1,
        InRange = 4,
        Tip = 0,
    }

    [AddComponentMenu(@"Input/Player Input")] [DisallowMultipleComponent] public class PlayerInput : MonoBehaviour
    {
        public const string ControlsChangedMessage = @"OnControlsChanged";
        public const string DeviceLostMessage = @"OnDeviceLost";
        public const string DeviceRegainedMessage = @"OnDeviceRegained";
        public event System.Action<InputAction.CallbackContext> onActionTriggered;
        public event System.Action<PlayerInput> onControlsChanged;
        public event System.Action<PlayerInput> onDeviceLost;
        public event System.Action<PlayerInput> onDeviceRegained;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<PlayerInput.ActionEvent> actionEvents { get; set; }
        public InputActionAsset actions { get; set; }
        [System.Obsolete(@"Use inputIsActive instead.")] public bool active { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<PlayerInput> all { get; }
        public Camera camera { get; set; }
        public PlayerInput.ControlsChangedEvent controlsChangedEvent { get; }
        public InputActionMap currentActionMap { get; set; }
        public string currentControlScheme { get; }
        public string defaultActionMap { get; set; }
        public string defaultControlScheme { get; set; }
        public PlayerInput.DeviceLostEvent deviceLostEvent { get; }
        public PlayerInput.DeviceRegainedEvent deviceRegainedEvent { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> devices { get; }
        public bool hasMissingRequiredDevices { get; }
        public bool inputIsActive { get; }
        public static bool isSinglePlayer { get; }
        public bool neverAutoSwitchControlSchemes { get; set; }
        public PlayerNotifications notificationBehavior { get; set; }
        public int playerIndex { get; }
        public int splitScreenIndex { get; }
        public UI.InputSystemUIInputModule uiInputModule { get; set; }
        public Users.InputUser user { get; }
        public PlayerInput() {}
        public void ActivateInput();
        public void DeactivateInput();
        public void DebugLogAction(InputAction.CallbackContext context);
        public static PlayerInput FindFirstPairedToDevice(InputDevice device);
        public static PlayerInput GetPlayerByIndex(int playerIndex);
        public static PlayerInput Instantiate(GameObject prefab, int playerIndex = -1, string controlScheme = default(string), int splitScreenIndex = -1, InputDevice pairWithDevice = default(InputDevice));
        public static PlayerInput Instantiate(GameObject prefab, int playerIndex = -1, string controlScheme = default(string), int splitScreenIndex = -1, params InputDevice[] pairWithDevices);
        [System.Obsolete(@"Use DeactivateInput instead.")] public void PassivateInput();
        public void SwitchCurrentActionMap(string mapNameOrId);
        public bool SwitchCurrentControlScheme(params InputDevice[] devices);
        public void SwitchCurrentControlScheme(string controlScheme, params InputDevice[] devices);
        public class ActionEvent : UnityEngine.Events.UnityEvent<InputAction.CallbackContext>
        {
            public string actionId { get; }
            public string actionName { get; }
            public ActionEvent() {}
            public ActionEvent(InputAction action) {}
            public ActionEvent(System.Guid actionGUID, string name = default(string)) {}
        }
        public class ControlsChangedEvent : UnityEngine.Events.UnityEvent<PlayerInput>
        {
            public ControlsChangedEvent() {}
        }
        public class DeviceLostEvent : UnityEngine.Events.UnityEvent<PlayerInput>
        {
            public DeviceLostEvent() {}
        }
        public class DeviceRegainedEvent : UnityEngine.Events.UnityEvent<PlayerInput>
        {
            public DeviceRegainedEvent() {}
        }
    }

    [AddComponentMenu(@"Input/Player Input Manager")] public class PlayerInputManager : MonoBehaviour
    {
        public const string PlayerJoinedMessage = @"OnPlayerJoined";
        public const string PlayerLeftMessage = @"OnPlayerLeft";
        public event System.Action<PlayerInput> onPlayerJoined;
        public event System.Action<PlayerInput> onPlayerLeft;
        public int fixedNumberOfSplitScreens { get; }
        public static PlayerInputManager instance { get; }
        public InputActionProperty joinAction { get; set; }
        public PlayerJoinBehavior joinBehavior { get; set; }
        public bool joiningEnabled { get; }
        public bool maintainAspectRatioInSplitScreen { get; }
        public int maxPlayerCount { get; }
        public PlayerNotifications notificationBehavior { get; set; }
        public int playerCount { get; }
        public PlayerInputManager.PlayerJoinedEvent playerJoinedEvent { get; }
        public PlayerInputManager.PlayerLeftEvent playerLeftEvent { get; }
        public GameObject playerPrefab { get; set; }
        public bool splitScreen { get; set; }
        public Rect splitScreenArea { get; }
        public PlayerInputManager() {}
        public void DisableJoining();
        public void EnableJoining();
        public PlayerInput JoinPlayer(int playerIndex = -1, int splitScreenIndex = -1, string controlScheme = default(string), InputDevice pairWithDevice = default(InputDevice));
        public PlayerInput JoinPlayer(int playerIndex = -1, int splitScreenIndex = -1, string controlScheme = default(string), params InputDevice[] pairWithDevices);
        public void JoinPlayerFromAction(InputAction.CallbackContext context);
        public void JoinPlayerFromActionIfNotAlreadyJoined(InputAction.CallbackContext context);
        public class PlayerJoinedEvent : UnityEngine.Events.UnityEvent<PlayerInput>
        {
            public PlayerJoinedEvent() {}
        }
        public class PlayerLeftEvent : UnityEngine.Events.UnityEvent<PlayerInput>
        {
            public PlayerLeftEvent() {}
        }
    }

    public enum PlayerJoinBehavior
    {
        JoinPlayersManually = 2,
        JoinPlayersWhenButtonIsPressed = 0,
        JoinPlayersWhenJoinActionIsTriggered = 1,
    }

    public enum PlayerNotifications
    {
        BroadcastMessages = 1,
        InvokeCSharpEvents = 3,
        InvokeUnityEvents = 2,
        SendMessages = 0,
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.PointerState))] [UnityEngine.Scripting.Preserve] public class Pointer : InputDevice, LowLevel.IInputStateCallbackReceiver
    {
        public static Pointer current { get; }
        public Controls.Vector2Control delta { get; }
        public Controls.Vector2Control position { get; }
        public Controls.ButtonControl press { get; }
        public Controls.AxisControl pressure { get; }
        public Controls.Vector2Control radius { get; }
        public Pointer() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected void OnNextUpdate();
        protected override void OnRemoved();
        protected void OnStateEvent(LowLevel.InputEventPtr eventPtr);
    }

    [Layouts.InputControlLayout(displayName = @"Pressure")] [UnityEngine.Scripting.Preserve] public class PressureSensor : Sensor
    {
        [Layouts.InputControl(displayName = @"Atmospheric Pressure", noisy = true)] public Controls.AxisControl atmosphericPressure { get; }
        public static PressureSensor current { get; }
        public PressureSensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(displayName = @"Proximity")] [UnityEngine.Scripting.Preserve] public class ProximitySensor : Sensor
    {
        public static ProximitySensor current { get; }
        [Layouts.InputControl(displayName = @"Distance", noisy = true)] public Controls.AxisControl distance { get; }
        public ProximitySensor() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class Sensor : InputDevice
    {
        public float samplingFrequency { get; set; }
        public Sensor() {}
    }

    [Layouts.InputControlLayout(displayName = @"Step Counter")] [UnityEngine.Scripting.Preserve] public class StepCounter : Sensor
    {
        public static StepCounter current { get; }
        [Layouts.InputControl(displayName = @"Step Counter", noisy = true)] public Controls.IntegerControl stepCounter { get; }
        public StepCounter() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
    }

    public enum TouchPhase
    {
        Began = 1,
        Canceled = 4,
        Ended = 3,
        Moved = 2,
        None = 0,
        Stationary = 5,
    }

    [Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(LowLevel.TouchscreenState))] [UnityEngine.Scripting.Preserve] public class Touchscreen : Pointer, LowLevel.IInputStateCallbackReceiver
    {
        public static Touchscreen current { get; }
        public Controls.TouchControl primaryTouch { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<Controls.TouchControl> touches { get; }
        public Touchscreen() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected void OnNextUpdate();
        protected override void OnRemoved();
        protected void OnStateEvent(LowLevel.InputEventPtr eventPtr);
    }

    [Layouts.InputControlLayout(displayName = @"Tracked Device", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class TrackedDevice : InputDevice
    {
        [Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public Controls.Vector3Control devicePosition { get; }
        [Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public Controls.QuaternionControl deviceRotation { get; }
        [Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public Controls.ButtonControl isTracked { get; }
        [Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public Controls.IntegerControl trackingState { get; }
        public TrackedDevice() {}
        protected override void FinishSetup();
    }
}

namespace UnityEngine.InputSystem.Android
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Accelerometer")] [UnityEngine.Scripting.Preserve] public class AndroidAccelerometer : Accelerometer
    {
        public AndroidAccelerometer() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"AmbientTemperature")] [UnityEngine.Scripting.Preserve] public class AndroidAmbientTemperature : AmbientTemperatureSensor
    {
        public AndroidAmbientTemperature() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(LowLevel.AndroidGameControllerState), variants = @"Gamepad")] [UnityEngine.Scripting.Preserve] public class AndroidGamepad : Gamepad
    {
        public AndroidGamepad() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Gravity")] [UnityEngine.Scripting.Preserve] public class AndroidGravitySensor : GravitySensor
    {
        public AndroidGravitySensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Gyroscope")] [UnityEngine.Scripting.Preserve] public class AndroidGyroscope : Gyroscope
    {
        public AndroidGyroscope() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(LowLevel.AndroidGameControllerState), variants = @"Joystick")] [UnityEngine.Scripting.Preserve] public class AndroidJoystick : Joystick
    {
        public AndroidJoystick() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Light")] [UnityEngine.Scripting.Preserve] public class AndroidLightSensor : LightSensor
    {
        public AndroidLightSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"LinearAcceleration")] [UnityEngine.Scripting.Preserve] public class AndroidLinearAccelerationSensor : LinearAccelerationSensor
    {
        public AndroidLinearAccelerationSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"MagneticField")] [UnityEngine.Scripting.Preserve] public class AndroidMagneticFieldSensor : MagneticFieldSensor
    {
        public AndroidMagneticFieldSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Pressure")] [UnityEngine.Scripting.Preserve] public class AndroidPressureSensor : PressureSensor
    {
        public AndroidPressureSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"Proximity")] [UnityEngine.Scripting.Preserve] public class AndroidProximity : ProximitySensor
    {
        public AndroidProximity() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"RelativeHumidity")] [UnityEngine.Scripting.Preserve] public class AndroidRelativeHumidity : HumiditySensor
    {
        public AndroidRelativeHumidity() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"RotationVector")] [UnityEngine.Scripting.Preserve] public class AndroidRotationVector : AttitudeSensor
    {
        public AndroidRotationVector() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.AndroidSensorState), variants = @"StepCounter")] [UnityEngine.Scripting.Preserve] public class AndroidStepCounter : StepCounter
    {
        public AndroidStepCounter() {}
    }
}

namespace UnityEngine.InputSystem.Composites
{
    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{negative}/{positive}")] [UnityEngine.Scripting.Preserve] public class AxisComposite : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [Tooltip(@"Value to return when the positive side is fully actuated.")] public float maxValue = 1f;
        [Tooltip(@"Value to return when the negative side is fully actuated.")] public float minValue = -1f;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int negative = 0;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int positive = 0;
        [Tooltip(@"If both the positive and negative side are actuated, decides what value to return. 'Neither' (default) means that the resulting value is the midpoint between min and max. 'Positive' means that max will be returned. 'Negative' means that min will be returned.")] public AxisComposite.WhichSideWins whichSideWins = AxisComposite.WhichSideWins.Neither;
        public float midPoint { get; }
        public AxisComposite() {}
        public override float EvaluateMagnitude(ref InputBindingCompositeContext context);
        public override float ReadValue(ref InputBindingCompositeContext context);
        public enum WhichSideWins
        {
            Negative = 2,
            Neither = 0,
            Positive = 1,
        }
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{modifier}+{button}")] [UnityEngine.Scripting.Preserve] public class ButtonWithOneModifier : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int button;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier;
        public ButtonWithOneModifier() {}
        public override float EvaluateMagnitude(ref InputBindingCompositeContext context);
        public override float ReadValue(ref InputBindingCompositeContext context);
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{modifier1}+{modifier2}+{button}")] [UnityEngine.Scripting.Preserve] public class ButtonWithTwoModifiers : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int button;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier1;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier2;
        public ButtonWithTwoModifiers() {}
        public override float EvaluateMagnitude(ref InputBindingCompositeContext context);
        public override float ReadValue(ref InputBindingCompositeContext context);
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{up}/{left}/{down}/{right}")] [UnityEngine.Scripting.Preserve] public class Vector2Composite : UnityEngine.InputSystem.InputBindingComposite<Vector2>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int down = 0;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int left = 0;
        public Vector2Composite.Mode mode;
        [System.Obsolete(@"Use Mode.DigitalNormalized with 'mode' instead")] public bool normalize = true;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int right = 0;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int up = 0;
        public Vector2Composite() {}
        public override float EvaluateMagnitude(ref InputBindingCompositeContext context);
        public override Vector2 ReadValue(ref InputBindingCompositeContext context);
        public enum Mode
        {
            Analog = 2,
            Digital = 1,
            DigitalNormalized = 0,
        }
    }
}

namespace UnityEngine.InputSystem.Controls
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class AnyKeyControl : ButtonControl
    {
        public AnyKeyControl() {}
        public override float ReadUnprocessedValueFromState(void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class AxisControl : UnityEngine.InputSystem.InputControl<float>
    {
        public AxisControl.Clamp clamp;
        public float clampConstant;
        public float clampMax;
        public float clampMin;
        public bool invert;
        public bool normalize;
        public float normalizeMax;
        public float normalizeMin;
        public float normalizeZero;
        public bool scale;
        public float scaleFactor;
        public AxisControl() {}
        public override bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public override float EvaluateMagnitude(void* statePtr);
        protected override void FinishSetup();
        protected float Preprocess(float value);
        public override float ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(float value, void* statePtr);
        public enum Clamp
        {
            AfterNormalize = 2,
            BeforeNormalize = 1,
            None = 0,
            ToConstantBeforeNormalize = 3,
        }
    }

    [UnityEngine.Scripting.Preserve] public class ButtonControl : AxisControl
    {
        public float pressPoint = -1f;
        public bool isPressed { get; }
        public float pressPointOrDefault { get; }
        public bool wasPressedThisFrame { get; }
        public bool wasReleasedThisFrame { get; }
        public ButtonControl() {}
        public bool IsValueConsideredPressed(float value);
    }

    [UnityEngine.Scripting.Preserve] public class DiscreteButtonControl : ButtonControl
    {
        public int maxValue;
        public int minValue;
        public int nullValue;
        public int wrapAtValue;
        public DiscreteButtonControl() {}
        protected override void FinishSetup();
        public override float ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(float value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class DoubleControl : UnityEngine.InputSystem.InputControl<double>
    {
        public DoubleControl() {}
        public override double ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(double value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class DpadControl : Vector2Control
    {
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Down")] public ButtonControl down { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Left")] public ButtonControl left { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Right")] public ButtonControl right { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Up")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"DpadAxis", name = @"x", synthetic = true, useStateFrom = @"right")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"DpadAxis", name = @"y", synthetic = true, useStateFrom = @"up")] public ButtonControl up { get; }
        public DpadControl() {}
        protected override void FinishSetup();
        public static Vector2 MakeDpadVector(float up, float down, float left, float right);
        public static Vector2 MakeDpadVector(bool up, bool down, bool left, bool right, bool normalize = true);
        public override Vector2 ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Vector2 value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class IntegerControl : UnityEngine.InputSystem.InputControl<int>
    {
        public IntegerControl() {}
        public override int ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(int value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class KeyControl : ButtonControl
    {
        public Key keyCode { get; set; }
        public int scanCode { get; }
        public KeyControl() {}
        protected override void RefreshConfiguration();
    }

    [UnityEngine.Scripting.Preserve] public class QuaternionControl : UnityEngine.InputSystem.InputControl<Quaternion>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"W")] public AxisControl w { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X")] public AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y")] public AxisControl y { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Z")] public AxisControl z { get; }
        public QuaternionControl() {}
        protected override void FinishSetup();
        public override Quaternion ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Quaternion value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class StickControl : Vector2Control
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Down", parameters = @"clamp=2,clampMin=-1,clampMax=0,invert", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"y")] [UnityEngine.Scripting.Preserve] public ButtonControl down { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left", parameters = @"clamp=2,clampMin=-1,clampMax=0,invert", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"x")] [UnityEngine.Scripting.Preserve] public ButtonControl left { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right", parameters = @"clamp=2,clampMin=0,clampMax=1", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"x")] [UnityEngine.Scripting.Preserve] public ButtonControl right { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Up", parameters = @"clamp=2,clampMin=0,clampMax=1", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"y")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Axis", maxValue = 1f, minValue = -1f, name = @"x", processors = @"axisDeadzone")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Axis", maxValue = 1f, minValue = -1f, name = @"y", processors = @"axisDeadzone")] [UnityEngine.Scripting.Preserve] public ButtonControl up { get; }
        public StickControl() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.LowLevel.TouchState))] [UnityEngine.Scripting.Preserve] public class TouchControl : UnityEngine.InputSystem.InputControl<UnityEngine.InputSystem.LowLevel.TouchState>
    {
        public Vector2Control delta { get; }
        public ButtonControl indirectTouch { get; }
        public bool isInProgress { get; }
        public TouchPhaseControl phase { get; }
        public Vector2Control position { get; }
        public TouchPressControl press { get; }
        public AxisControl pressure { get; }
        public Vector2Control radius { get; }
        public Vector2Control startPosition { get; }
        public DoubleControl startTime { get; }
        public ButtonControl tap { get; }
        public IntegerControl tapCount { get; }
        public IntegerControl touchId { get; }
        public TouchControl() {}
        protected override void FinishSetup();
        public override UnityEngine.InputSystem.LowLevel.TouchState ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(UnityEngine.InputSystem.LowLevel.TouchState value, void* statePtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class TouchPhaseControl : UnityEngine.InputSystem.InputControl<TouchPhase>
    {
        public TouchPhaseControl() {}
        public override TouchPhase ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(TouchPhase value, void* statePtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class TouchPressControl : ButtonControl
    {
        public TouchPressControl() {}
        protected override void FinishSetup();
        public override float ReadUnprocessedValueFromState(void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class Vector2Control : UnityEngine.InputSystem.InputControl<Vector2>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", offset = 0)] public AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", offset = 4)] public AxisControl y { get; }
        public Vector2Control() {}
        public override float EvaluateMagnitude(void* statePtr);
        protected override void FinishSetup();
        public override Vector2 ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Vector2 value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class Vector3Control : UnityEngine.InputSystem.InputControl<Vector3>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", offset = 0)] public AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", offset = 4)] public AxisControl y { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Z", offset = 8)] public AxisControl z { get; }
        public Vector3Control() {}
        public override float EvaluateMagnitude(void* statePtr);
        protected override void FinishSetup();
        public override Vector3 ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Vector3 value, void* statePtr);
    }
}

namespace UnityEngine.InputSystem.DualShock
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.DualShock3HIDInputReport))] [UnityEngine.Scripting.Preserve] public class DualShock3GamepadHID : DualShockGamepad
    {
        public UnityEngine.InputSystem.Controls.ButtonControl leftTriggerButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl playStationButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightTriggerButton { get; }
        public DualShock3GamepadHID() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.DualShock4HIDInputReport))] [UnityEngine.Scripting.Preserve] public class DualShock4GamepadHID : DualShockGamepad
    {
        public UnityEngine.InputSystem.Controls.ButtonControl leftTriggerButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl playStationButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightTriggerButton { get; }
        public DualShock4GamepadHID() {}
        protected override void FinishSetup();
        public override void PauseHaptics();
        public override void ResetHaptics();
        public override void ResumeHaptics();
        public override void SetLightBarColor(Color color);
        public override void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"PS4 Controller")] [UnityEngine.Scripting.Preserve] public class DualShockGamepad : Gamepad, IDualShockHaptics, UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public static DualShockGamepad current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L1", name = @"leftShoulder", shortDisplayName = @"L1")] public UnityEngine.InputSystem.Controls.ButtonControl L1 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L2", name = @"leftTrigger", shortDisplayName = @"L2")] public UnityEngine.InputSystem.Controls.ButtonControl L2 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L3", name = @"leftStickPress", shortDisplayName = @"L3")] public UnityEngine.InputSystem.Controls.ButtonControl L3 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Options", name = @"start")] public UnityEngine.InputSystem.Controls.ButtonControl optionsButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R1", name = @"rightShoulder", shortDisplayName = @"R1")] public UnityEngine.InputSystem.Controls.ButtonControl R1 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R2", name = @"rightTrigger", shortDisplayName = @"R2")] public UnityEngine.InputSystem.Controls.ButtonControl R2 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R3", name = @"rightStickPress", shortDisplayName = @"R3")] public UnityEngine.InputSystem.Controls.ButtonControl R3 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Share", name = @"select")] public UnityEngine.InputSystem.Controls.ButtonControl shareButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Circle", name = @"buttonEast", shortDisplayName = @"Circle")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Cross", name = @"buttonSouth", shortDisplayName = @"Cross")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Square", name = @"buttonWest", shortDisplayName = @"Square")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Triangle", name = @"buttonNorth", shortDisplayName = @"Triangle")] [UnityEngine.InputSystem.Layouts.InputControl] public UnityEngine.InputSystem.Controls.ButtonControl touchpadButton { get; }
        public DualShockGamepad() {}
        protected override void FinishSetup();
        public override void MakeCurrent();
        protected override void OnRemoved();
        public virtual void SetLightBarColor(Color color);
    }

    public interface IDualShockHaptics : UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public void SetLightBarColor(Color color);
    }
}

namespace UnityEngine.InputSystem.Editor
{
    public static class InputActionCodeGenerator
    {
        public static string GenerateWrapperCode(InputActionAsset asset, InputActionCodeGenerator.Options options = default(InputActionCodeGenerator.Options));
        public static bool GenerateWrapperCode(string filePath, InputActionAsset asset, InputActionCodeGenerator.Options options);
        public struct Options
        {
            public string className { get; set; }
            public string namespaceName { get; set; }
            public string sourceAssetPath { get; set; }
        }
    }

    public sealed class InputControlPathEditor : System.IDisposable
    {
        public System.Action onModified { get; }
        public UnityEditor.SerializedProperty pathProperty { get; }
        public InputControlPathEditor(UnityEditor.SerializedProperty pathProperty, InputControlPickerState pickerState, System.Action onModified, GUIContent label = default(GUIContent)) {}
        public void Dispose();
        public void OnGUI();
        public void OnGUI(Rect rect);
        public void SetControlPathsToMatch(System.Collections.Generic.IEnumerable<string> controlPaths);
        public void SetExpectedControlLayout(string expectedControlLayout);
        public void SetExpectedControlLayoutFromAttribute();
    }

    public sealed class InputControlPicker : System.IDisposable
    {
        public InputControlPickerState state { get; }
        public InputControlPicker(InputControlPicker.Mode mode, System.Action<string> onPick, InputControlPickerState state) {}
        public void Dispose();
        public void Show(Rect rect);
        public enum Mode
        {
            PickControl = 0,
            PickDevice = 1,
        }
    }

    public class InputControlPickerState
    {
        public InputControlPickerState() {}
    }

    public abstract class InputParameterEditor
    {
        public object target { get; }
        protected InputParameterEditor() {}
        public abstract void OnGUI();
    }

    public abstract class InputParameterEditor<TObject> : InputParameterEditor where TObject : class
    {
        public TObject target { get; }
        protected InputParameterEditor() {}
        protected virtual void OnEnable();
    }
}

namespace UnityEngine.InputSystem.EnhancedTouch
{
    public static class EnhancedTouchSupport
    {
        public static bool enabled { get; }
        public static void Disable();
        public static void Enable();
    }

    public class Finger
    {
        public Touch currentTouch { get; }
        public int index { get; }
        public bool isActive { get; }
        public Touch lastTouch { get; }
        public Touchscreen screen { get; }
        public Vector2 screenPosition { get; }
        public TouchHistory touchHistory { get; }
    }

    public struct Touch : System.IEquatable<Touch>
    {
        public static event System.Action<Finger> onFingerDown;
        public static event System.Action<Finger> onFingerMove;
        public static event System.Action<Finger> onFingerUp;
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<Finger> activeFingers { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<Touch> activeTouches { get; }
        public Vector2 delta { get; }
        public Finger finger { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<Finger> fingers { get; }
        public TouchHistory history { get; }
        public bool isInProgress { get; }
        public bool isTap { get; }
        public static int maxHistoryLengthPerFinger { get; }
        public TouchPhase phase { get; }
        public float pressure { get; }
        public Vector2 radius { get; }
        public Touchscreen screen { get; }
        public Vector2 screenPosition { get; }
        public static System.Collections.Generic.IEnumerable<Touchscreen> screens { get; }
        public Vector2 startScreenPosition { get; }
        public double startTime { get; }
        public int tapCount { get; }
        public double time { get; }
        public int touchId { get; }
        public bool valid { get; }
        public override bool Equals(object obj);
        public bool Equals(Touch other);
        public override int GetHashCode();
        public override string ToString();
    }

    public struct TouchHistory : System.Collections.Generic.IEnumerable<Touch>, System.Collections.Generic.IReadOnlyCollection<Touch>, System.Collections.Generic.IReadOnlyList<Touch>, System.Collections.IEnumerable
    {
        public int Count { get; }
        public Touch this[int index] { get; }
        public System.Collections.Generic.IEnumerator<Touch> GetEnumerator();
    }

    [AddComponentMenu(@"Input/Debug/Touch Simulation")] [ExecuteInEditMode] [UnityEditor.InitializeOnLoad] public class TouchSimulation : MonoBehaviour, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
    {
        public static TouchSimulation instance { get; }
        public Touchscreen simulatedTouchscreen { get; }
        public TouchSimulation() {}
        protected void AddPointer(Pointer pointer);
        public static void Destroy();
        public static void Disable();
        public static void Enable();
        protected void InstallStateChangeMonitors(int startIndex = 0);
        protected void OnDisable();
        protected void OnEnable();
        protected void OnSourceControlChangedValue(InputControl control, double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, long sourceDeviceAndButtonIndex);
        protected void RemovePointer(Pointer pointer);
        protected void UninstallStateChangeMonitors(int startIndex = 0);
    }
}

namespace UnityEngine.InputSystem.Haptics
{
    public interface IDualMotorRumble : IHaptics
    {
        public void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    public interface IHaptics
    {
        public void PauseHaptics();
        public void ResetHaptics();
        public void ResumeHaptics();
    }
}

namespace UnityEngine.InputSystem.HID
{
    [UnityEngine.Scripting.Preserve] public class HID : InputDevice
    {
        public HID.HIDDeviceDescriptor hidDescriptor { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDParsedReportDescriptorDeviceCommandType { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDReportDescriptorDeviceCommandType { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDReportDescriptorSizeDeviceCommandType { get; }
        public HID() {}
        public static string UsagePageToString(HID.UsagePage usagePage);
        public static string UsageToString(HID.UsagePage usagePage, int usage);
        public enum Button
        {
            Primary = 1,
            Secondary = 2,
            Tertiary = 3,
            Undefined = 0,
        }
        public enum GenericDesktop
        {
            ApplicationBreak = 165,
            ApplicationDebuggerBreak = 166,
            AssistiveControl = 10,
            ByteCount = 59,
            CountedBuffer = 58,
            Dial = 55,
            DpadDown = 145,
            DpadLeft = 147,
            DpadRight = 146,
            DpadUp = 144,
            FeatureNotification = 71,
            Gamepad = 5,
            HatSwitch = 57,
            Joystick = 4,
            Keyboard = 6,
            Keypad = 7,
            MotionWakeup = 60,
            Mouse = 2,
            MultiAxisController = 8,
            Pointer = 1,
            ResolutionMultiplier = 72,
            Rx = 51,
            Ry = 52,
            Rz = 53,
            Select = 62,
            Slider = 54,
            Start = 61,
            SystemAppMenu = 134,
            SystemBreak = 163,
            SystemColdRestart = 142,
            SystemContextMenu = 132,
            SystemControl = 128,
            SystemDebuggerBreak = 164,
            SystemDisplayBoth = 179,
            SystemDisplayDual = 180,
            SystemDisplayExternal = 178,
            SystemDisplayInternal = 177,
            SystemDisplayInvert = 176,
            SystemDisplayLCDAutoScale = 183,
            SystemDisplaySwapPrimarySecondary = 182,
            SystemDisplayToggleIntExt = 181,
            SystemDock = 160,
            SystemHibernate = 168,
            SystemMainMenu = 133,
            SystemMenuDown = 141,
            SystemMenuExit = 136,
            SystemMenuHelp = 135,
            SystemMenuLeft = 139,
            SystemMenuRight = 138,
            SystemMenuSelect = 137,
            SystemMenuUp = 140,
            SystemPowerDown = 129,
            SystemSetup = 162,
            SystemSleep = 130,
            SystemSpeakerMute = 167,
            SystemUndock = 161,
            SystemWakeUp = 131,
            SystemWarmRestart = 143,
            TabletPCControls = 9,
            Undefined = 0,
            Vbrx = 67,
            Vbry = 68,
            Vbrz = 69,
            Vno = 70,
            Vx = 64,
            Vy = 65,
            Vz = 66,
            Wheel = 56,
            X = 48,
            Y = 49,
            Z = 50,
        }
        public struct HIDCollectionDescriptor
        {
            public int childCount;
            public int firstChild;
            public int parent;
            public HID.HIDCollectionType type;
            public int usage;
            public HID.UsagePage usagePage;
        }
        public enum HIDCollectionType
        {
            Application = 1,
            Logical = 2,
            NamedArray = 4,
            Physical = 0,
            Report = 3,
            UsageModifier = 6,
            UsageSwitch = 5,
        }
        public struct HIDDeviceDescriptor
        {
            public HID.HIDCollectionDescriptor[] collections;
            public HID.HIDElementDescriptor[] elements;
            public int featureReportSize;
            public int inputReportSize;
            public int outputReportSize;
            public int productId;
            public int usage;
            public HID.UsagePage usagePage;
            public int vendorId;
            public static HID.HIDDeviceDescriptor FromJson(string json);
            public string ToJson();
        }
        public struct HIDDeviceDescriptorBuilder
        {
            public int usage;
            public HID.UsagePage usagePage;
            public HIDDeviceDescriptorBuilder(HID.GenericDesktop usage) {}
            public HIDDeviceDescriptorBuilder(HID.UsagePage usagePage, int usage) {}
            public HID.HIDDeviceDescriptorBuilder AddElement(HID.GenericDesktop usage, int sizeInBits);
            public HID.HIDDeviceDescriptorBuilder AddElement(HID.UsagePage usagePage, int usage, int sizeInBits);
            public HID.HIDDeviceDescriptor Finish();
            public HID.HIDDeviceDescriptorBuilder StartReport(HID.HIDReportType reportType, int reportId = 1);
            public HID.HIDDeviceDescriptorBuilder WithLogicalMinMax(int min, int max);
            public HID.HIDDeviceDescriptorBuilder WithPhysicalMinMax(int min, int max);
        }
        public struct HIDElementDescriptor
        {
            public int collectionIndex;
            public HID.HIDElementFlags flags;
            public int logicalMax;
            public int logicalMin;
            public int physicalMax;
            public int physicalMin;
            public int reportId;
            public int reportOffsetInBits;
            public int reportSizeInBits;
            public HID.HIDReportType reportType;
            public int unit;
            public int unitExponent;
            public int usage;
            public System.Nullable<int> usageMax;
            public System.Nullable<int> usageMin;
            public HID.UsagePage usagePage;
            public bool hasNullState { get; }
            public bool hasPreferredState { get; }
            public bool isArray { get; }
            public bool isConstant { get; }
            public bool isNonLinear { get; }
            public bool isRelative { get; }
            public bool isWrapping { get; }
            public bool Is(HID.UsagePage usagePage, int usage);
        }
        [System.Flags] public enum HIDElementFlags
        {
            BufferedBytes = 256,
            Constant = 1,
            NonLinear = 16,
            NoPreferred = 32,
            NullState = 64,
            Relative = 4,
            Variable = 2,
            Volatile = 128,
            Wrap = 8,
        }
        public enum HIDReportType
        {
            Feature = 3,
            Input = 1,
            Output = 2,
            Unknown = 0,
        }
        public enum Simulation
        {
            Accelerator = 196,
            Aileron = 176,
            AileronTrim = 177,
            AirplaneSimulationDevice = 9,
            AntiTorqueControl = 178,
            AutomobileSimulationDevice = 2,
            AutopilotEnable = 179,
            Ballast = 204,
            BarrelElevation = 202,
            BicycleCrank = 205,
            BicylcleSimulationDevice = 12,
            Brake = 197,
            ChaffRelease = 180,
            Clutch = 198,
            CollectiveControl = 181,
            CyclicControl = 34,
            CyclicTrim = 35,
            DiveBreak = 182,
            DivePlane = 203,
            ElectronicCountermeasures = 183,
            Elevator = 184,
            ElevatorTrim = 185,
            FlareRelease = 189,
            FlightCommunications = 188,
            FlightControlStick = 32,
            FlightSimulationDevice = 1,
            FlightStick = 33,
            FlightYoke = 36,
            FrontBrake = 207,
            HandleBars = 206,
            HelicopterSimulationDevice = 10,
            LandingGear = 190,
            MagicCarpetSimulationDevice = 11,
            MotorcycleSimulationDevice = 7,
            RearBrake = 208,
            Rudder = 186,
            SailingSimulationDevice = 6,
            Shifter = 199,
            SpaceshipSimulationDevice = 4,
            SportsSimulationDevice = 8,
            Steering = 200,
            SubmarineSimulationDevice = 5,
            TankSimulationDevice = 3,
            Throttle = 187,
            ToeBreak = 191,
            TrackControl = 37,
            Trigger = 192,
            TurretDirection = 201,
            Undefined = 0,
            WeaponsArm = 193,
            WeaponsSelect = 194,
            WingFlaps = 195,
        }
        public enum UsagePage
        {
            AlphanumericDisplay = 20,
            Arcade = 145,
            BarCodeScanner = 140,
            Button = 9,
            Camera = 144,
            Consumer = 12,
            Digitizer = 13,
            GameControls = 5,
            GenericDesktop = 1,
            GenericDeviceControls = 6,
            Keyboard = 7,
            LEDs = 8,
            MagneticStripeReader = 142,
            MedicalInstruments = 64,
            Monitor = 128,
            Ordinal = 10,
            PID = 15,
            Power = 132,
            Simulation = 2,
            SportControls = 4,
            Telephony = 11,
            Undefined = 0,
            Unicode = 16,
            VendorDefined = 65280,
            VRControls = 3,
        }
    }

    public static class HIDSupport
    {
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<HIDSupport.HIDPageUsage> supportedHIDUsages { get; set; }
        public struct HIDPageUsage
        {
            public HID.UsagePage page;
            public int usage;
            public HIDPageUsage(HID.GenericDesktop usage) {}
            public HIDPageUsage(HID.UsagePage page, int usage) {}
        }
    }
}

namespace UnityEngine.InputSystem.Interactions
{
    [System.ComponentModel.DisplayName(@"Hold")] [UnityEngine.Scripting.Preserve] public class HoldInteraction : IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public HoldInteraction() {}
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }

    [UnityEngine.Scripting.Preserve] public class MultiTapInteraction : IInputInteraction, UnityEngine.InputSystem.IInputInteraction<float>
    {
        public float pressPoint;
        [Tooltip(@"How many taps need to be performed in succession. Two means double-tap, three means triple-tap, and so on.")] public int tapCount = 2;
        [Tooltip(@"The maximum delay (in seconds) allowed between each tap. If this time is exceeded, the multi-tap is canceled.")] public float tapDelay;
        [Tooltip(@"The maximum time (in seconds) allowed to elapse between pressing and releasing a control for it to register as a tap.")] public float tapTime;
        public MultiTapInteraction() {}
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }

    public enum PressBehavior
    {
        PressAndRelease = 2,
        PressOnly = 0,
        ReleaseOnly = 1,
    }

    [System.ComponentModel.DisplayName(@"Press")] [UnityEngine.Scripting.Preserve] public class PressInteraction : IInputInteraction
    {
        [Tooltip(@"Determines how button presses trigger the action. By default (PressOnly), the action is performed on press. With ReleaseOnly, the action is performed on release. With PressAndRelease, the action is performed on press and release.")] public PressBehavior behavior;
        [Tooltip(@"The amount of actuation a control requires before being considered pressed. If not set, default to 'Default Press Point' in the global input settings.")] public float pressPoint;
        public PressInteraction() {}
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }

    [System.ComponentModel.DisplayName(@"Long Tap")] [UnityEngine.Scripting.Preserve] public class SlowTapInteraction : IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public SlowTapInteraction() {}
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }

    [System.ComponentModel.DisplayName(@"Tap")] [UnityEngine.Scripting.Preserve] public class TapInteraction : IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public TapInteraction() {}
        public void Process(ref InputInteractionContext context);
        public void Reset();
    }
}

namespace UnityEngine.InputSystem.iOS
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS DualShock 4 Gamepad", stateType = typeof(LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class DualShock4GampadiOS : UnityEngine.InputSystem.DualShock.DualShockGamepad
    {
        public DualShock4GampadiOS() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS Gamepad", stateType = typeof(LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class iOSGameController : Gamepad
    {
        public iOSGameController() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS Xbox One Gamepad", stateType = typeof(LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class XboxOneGampadiOS : UnityEngine.InputSystem.XInput.XInputController
    {
        public XboxOneGampadiOS() {}
    }
}

namespace UnityEngine.InputSystem.Layouts
{
    [System.AttributeUsage(System.AttributeTargets.Field|System.AttributeTargets.Property, AllowMultiple = true)] public sealed class InputControlAttribute : PropertyAttribute
    {
        public string alias { get; set; }
        public string[] aliases { get; set; }
        public int arraySize { get; set; }
        public System.UInt32 bit { get; set; }
        public object defaultState { get; set; }
        public string displayName { get; set; }
        public string format { get; set; }
        public string layout { get; set; }
        public object maxValue { get; set; }
        public object minValue { get; set; }
        public string name { get; set; }
        public bool noisy { get; set; }
        public System.UInt32 offset { get; set; }
        public string parameters { get; set; }
        public string processors { get; set; }
        public string shortDisplayName { get; set; }
        public System.UInt32 sizeInBits { get; set; }
        public bool synthetic { get; set; }
        public string usage { get; set; }
        public string[] usages { get; set; }
        public string useStateFrom { get; set; }
        public string variants { get; set; }
        public InputControlAttribute() {}
    }

    public class InputControlLayout
    {
        public const string VariantSeparator = @";";
        public System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.InternedString> appliedOverrides { get; }
        public System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.InternedString> baseLayouts { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> commonUsages { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlLayout.ControlItem> controls { get; }
        public static UnityEngine.InputSystem.Utilities.InternedString DefaultVariant { get; }
        public string displayName { get; }
        public bool hideInUI { get; }
        public bool isControlLayout { get; }
        public bool isDeviceLayout { get; }
        public bool isGenericTypeOfDevice { get; }
        public bool isOverride { get; }
        public InputControlLayout.ControlItem this[string path] { get; }
        public UnityEngine.InputSystem.Utilities.InternedString name { get; }
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; }
        public int stateSizeInBytes { get; }
        public System.Type type { get; }
        public bool updateBeforeRender { get; }
        public UnityEngine.InputSystem.Utilities.InternedString variants { get; }
        public System.Nullable<InputControlLayout.ControlItem> FindControl(UnityEngine.InputSystem.Utilities.InternedString path);
        public System.Nullable<InputControlLayout.ControlItem> FindControlIncludingArrayElements(string path, out int arrayIndex);
        public static InputControlLayout FromJson(string json);
        public static InputControlLayout FromType(string name, System.Type type);
        public System.Type GetValueType();
        public void MergeLayout(InputControlLayout other);
        public string ToJson();
        public class Builder
        {
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControlLayout.ControlItem> controls { get; }
            public string displayName { get; set; }
            public string extendsLayout { get; set; }
            public string name { get; set; }
            public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; set; }
            public int stateSizeInBytes { get; set; }
            public System.Type type { get; set; }
            public System.Nullable<bool> updateBeforeRender { get; set; }
            public Builder() {}
            public InputControlLayout.Builder.ControlBuilder AddControl(string name);
            public InputControlLayout Build();
            public InputControlLayout.Builder Extend(string baseLayoutName);
            public InputControlLayout.Builder WithDisplayName(string displayName);
            public InputControlLayout.Builder WithFormat(string format);
            public InputControlLayout.Builder WithFormat(UnityEngine.InputSystem.Utilities.FourCC format);
            public InputControlLayout.Builder WithName(string name);
            public InputControlLayout.Builder WithSizeInBytes(int sizeInBytes);
            public InputControlLayout.Builder WithType<T>() where T : InputControl;
            public struct ControlBuilder
            {
                public InputControlLayout.Builder.ControlBuilder AsArrayOfControlsWithSize(int arraySize);
                public InputControlLayout.Builder.ControlBuilder IsNoisy(bool value);
                public InputControlLayout.Builder.ControlBuilder IsSynthetic(bool value);
                public InputControlLayout.Builder.ControlBuilder UsingStateFrom(string path);
                public InputControlLayout.Builder.ControlBuilder WithBitOffset(System.UInt32 bit);
                public InputControlLayout.Builder.ControlBuilder WithByteOffset(System.UInt32 offset);
                public InputControlLayout.Builder.ControlBuilder WithDefaultState(UnityEngine.InputSystem.Utilities.PrimitiveValue value);
                public InputControlLayout.Builder.ControlBuilder WithDisplayName(string displayName);
                public InputControlLayout.Builder.ControlBuilder WithFormat(string format);
                public InputControlLayout.Builder.ControlBuilder WithFormat(UnityEngine.InputSystem.Utilities.FourCC format);
                public InputControlLayout.Builder.ControlBuilder WithLayout(string layout);
                public InputControlLayout.Builder.ControlBuilder WithParameters(string parameters);
                public InputControlLayout.Builder.ControlBuilder WithProcessors(string processors);
                public InputControlLayout.Builder.ControlBuilder WithSizeInBits(System.UInt32 sizeInBits);
                public InputControlLayout.Builder.ControlBuilder WithUsages(System.Collections.Generic.IEnumerable<string> usages);
                public InputControlLayout.Builder.ControlBuilder WithUsages(params string[] usages);
                public InputControlLayout.Builder.ControlBuilder WithUsages(params UnityEngine.InputSystem.Utilities.InternedString[] usages);
            }
        }
        public struct ControlItem
        {
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> aliases { get; }
            public int arraySize { get; }
            public System.UInt32 bit { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue defaultState { get; }
            public string displayName { get; }
            public UnityEngine.InputSystem.Utilities.FourCC format { get; }
            public bool isArray { get; }
            public bool isFirstDefinedInThisLayout { get; }
            public bool isModifyingExistingControl { get; }
            public bool isNoisy { get; }
            public bool isSynthetic { get; }
            public UnityEngine.InputSystem.Utilities.InternedString layout { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue maxValue { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue minValue { get; }
            public UnityEngine.InputSystem.Utilities.InternedString name { get; }
            public System.UInt32 offset { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.NamedValue> parameters { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.NameAndParameters> processors { get; }
            public string shortDisplayName { get; }
            public System.UInt32 sizeInBits { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> usages { get; }
            public string useStateFrom { get; }
            public UnityEngine.InputSystem.Utilities.InternedString variants { get; }
            public InputControlLayout.ControlItem Merge(InputControlLayout.ControlItem other);
        }
        public class LayoutNotFoundException : System.Exception
        {
            public string layout { get; }
            public LayoutNotFoundException() {}
            public LayoutNotFoundException(string name) {}
            protected LayoutNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) {}
            public LayoutNotFoundException(string message, System.Exception innerException) {}
            public LayoutNotFoundException(string name, string message) {}
        }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false)] public sealed class InputControlLayoutAttribute : System.Attribute
    {
        public string[] commonUsages { get; set; }
        public string description { get; set; }
        public string displayName { get; set; }
        public bool hideInUI { get; set; }
        public bool isGenericTypeOfDevice { get; set; }
        public string stateFormat { get; set; }
        public System.Type stateType { get; set; }
        public bool updateBeforeRender { get; set; }
        public string variants { get; set; }
        public InputControlLayoutAttribute() {}
    }

    public struct InputDeviceDescription : System.IEquatable<InputDeviceDescription>
    {
        public string capabilities { get; set; }
        public string deviceClass { get; set; }
        public bool empty { get; }
        public string interfaceName { get; set; }
        public string manufacturer { get; set; }
        public string product { get; set; }
        public string serial { get; set; }
        public string version { get; set; }
        public override bool Equals(object obj);
        public bool Equals(InputDeviceDescription other);
        public static InputDeviceDescription FromJson(string json);
        public override int GetHashCode();
        public static bool operator ==(InputDeviceDescription left, InputDeviceDescription right);
        public static bool operator !=(InputDeviceDescription left, InputDeviceDescription right);
        public string ToJson();
        public override string ToString();
    }

    public delegate string InputDeviceFindControlLayoutDelegate(ref InputDeviceDescription description, string matchedLayout, UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate executeDeviceCommand);

    public struct InputDeviceMatcher : System.IEquatable<InputDeviceMatcher>
    {
        public bool empty { get; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> patterns { get; }
        public override bool Equals(object obj);
        public bool Equals(InputDeviceMatcher other);
        public static InputDeviceMatcher FromDeviceDescription(InputDeviceDescription deviceDescription);
        public override int GetHashCode();
        public float MatchPercentage(InputDeviceDescription deviceDescription);
        public static bool operator ==(InputDeviceMatcher left, InputDeviceMatcher right);
        public static bool operator !=(InputDeviceMatcher left, InputDeviceMatcher right);
        public override string ToString();
        public InputDeviceMatcher WithCapability<TValue>(string path, TValue value);
        public InputDeviceMatcher WithDeviceClass(string pattern, bool supportRegex = true);
        public InputDeviceMatcher WithInterface(string pattern, bool supportRegex = true);
        public InputDeviceMatcher WithManufacturer(string pattern, bool supportRegex = true);
        public InputDeviceMatcher WithProduct(string pattern, bool supportRegex = true);
        public InputDeviceMatcher WithVersion(string pattern, bool supportRegex = true);
    }
}

namespace UnityEngine.InputSystem.LowLevel
{
    public struct DeltaStateEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat;
        public System.UInt32 stateOffset;
        public const int Type = 1145852993;
        public void* deltaState { get; }
        public System.UInt32 deltaStateSizeInBytes { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static DeltaStateEvent* From(InputEventPtr ptr);
        public static Unity.Collections.NativeArray<byte> From(InputControl control, out InputEventPtr eventPtr, Unity.Collections.Allocator allocator = Unity.Collections.Allocator.Temp);
        public InputEventPtr ToEventPtr();
    }

    public struct DeviceConfigurationEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public const int Type = 1145259591;
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static DeviceConfigurationEvent Create(int deviceId, double time);
        public InputEventPtr ToEventPtr();
    }

    public struct DeviceRemoveEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public const int Type = 1146242381;
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static DeviceRemoveEvent Create(int deviceId, double time = -1d);
        public InputEventPtr ToEventPtr();
    }

    public struct DisableDeviceCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static DisableDeviceCommand Create();
    }

    public struct EnableDeviceCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static EnableDeviceCommand Create();
    }

    public struct EnableIMECompositionCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public bool imeEnabled { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static EnableIMECompositionCommand Create(bool enabled);
    }

    public enum GamepadButton
    {
        A = 6,
        B = 5,
        Circle = 5,
        Cross = 6,
        DpadDown = 1,
        DpadLeft = 2,
        DpadRight = 3,
        DpadUp = 0,
        East = 5,
        LeftShoulder = 10,
        LeftStick = 8,
        LeftTrigger = 32,
        North = 4,
        RightShoulder = 11,
        RightStick = 9,
        RightTrigger = 33,
        Select = 13,
        South = 6,
        Square = 7,
        Start = 12,
        Triangle = 4,
        West = 7,
        X = 7,
        Y = 4,
    }

    public struct GamepadState : IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 4, displayName = @"Button North", layout = @"Button", name = @"buttonNorth", shortDisplayName = @"Y")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 5, displayName = @"Button East", layout = @"Button", name = @"buttonEast", shortDisplayName = @"B", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 6, displayName = @"Button South", layout = @"Button", name = @"buttonSouth", shortDisplayName = @"A", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 7, displayName = @"Button West", layout = @"Button", name = @"buttonWest", shortDisplayName = @"X", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"D-Pad", format = @"BIT", layout = @"Dpad", name = @"dpad", sizeInBits = 4, usage = @"Hatswitch")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 10, displayName = @"Left Shoulder", layout = @"Button", name = @"leftShoulder", shortDisplayName = @"LB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 11, displayName = @"Right Shoulder", layout = @"Button", name = @"rightShoulder", shortDisplayName = @"RB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 12, displayName = @"Start", layout = @"Button", name = @"start", usage = @"Menu")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 13, displayName = @"Select", layout = @"Button", name = @"select")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 8, displayName = @"Left Stick Press", layout = @"Button", name = @"leftStickPress")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 9, displayName = @"Right Stick Press", layout = @"Button", name = @"rightStickPress")] public System.UInt32 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Stick", layout = @"Stick", processors = @"stickDeadzone", shortDisplayName = @"LS", usage = @"Primary2DMotion")] public Vector2 leftStick;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Trigger", format = @"FLT", layout = @"Button", shortDisplayName = @"LT", usage = @"SecondaryTrigger")] public float leftTrigger;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Stick", layout = @"Stick", processors = @"stickDeadzone", shortDisplayName = @"RS", usage = @"Secondary2DMotion")] public Vector2 rightStick;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Trigger", format = @"FLT", layout = @"Button", shortDisplayName = @"RT", usage = @"SecondaryTrigger")] public float rightTrigger;
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public GamepadState(params GamepadButton[] buttons) {}
        public GamepadState WithButton(GamepadButton button, bool value = true);
    }

    public interface IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
    }

    public interface IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
    }

    public interface IInputStateCallbackReceiver
    {
        public bool GetStateOffsetForEvent(InputControl control, InputEventPtr eventPtr, ref System.UInt32 offset);
        public void OnNextUpdate();
        public void OnStateEvent(InputEventPtr eventPtr);
    }

    public interface IInputStateChangeMonitor
    {
        public void NotifyControlStateChanged(InputControl control, double time, InputEventPtr eventPtr, long monitorIndex);
        public void NotifyTimerExpired(InputControl control, double time, long monitorIndex, int timerIndex);
    }

    public interface IInputStateTypeInfo
    {
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
    }

    public interface IInputUpdateCallbackReceiver
    {
        public void OnUpdate();
    }

    public struct IMECompositionEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public IMECompositionString compositionString;
        public const int Type = 1229800787;
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static IMECompositionEvent Create(int deviceId, string compositionString, double time);
    }

    public struct IMECompositionString : System.Collections.Generic.IEnumerable<char>, System.Collections.IEnumerable
    {
        public int Count { get; }
        public char this[int index] { get; }
        public IMECompositionString(string characters) {}
        public System.Collections.Generic.IEnumerator<char> GetEnumerator();
        public override string ToString();
    }

    public struct InitiateUserAccountPairingCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static InitiateUserAccountPairingCommand Create();
        public enum Result
        {
            ErrorAlreadyInProgress = -2,
            ErrorNotSupported = -1,
            SuccessfullyInitiated = 1,
        }
    }

    public struct InputDeviceCommand : IInputDeviceCommandInfo
    {
        public const int BaseCommandSize = 8;
        public const long GenericFailure = -1;
        public const long GenericSuccess = 1;
        public int sizeInBytes;
        public UnityEngine.InputSystem.Utilities.FourCC type;
        public void* payloadPtr { get; }
        public int payloadSizeInBytes { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public InputDeviceCommand(UnityEngine.InputSystem.Utilities.FourCC type, int sizeInBytes = 8) {}
        public static Unity.Collections.NativeArray<byte> AllocateNative(UnityEngine.InputSystem.Utilities.FourCC type, int payloadSize);
    }

    public delegate System.Nullable<long> InputDeviceCommandDelegate(InputDevice device, InputDeviceCommand* command);

    public delegate long InputDeviceExecuteCommandDelegate(ref InputDeviceCommand command);

    public struct InputEvent
    {
        public const int InvalidEventId = 0;
        public int deviceId { get; set; }
        public int eventId { get; set; }
        public bool handled { get; set; }
        public System.UInt32 sizeInBytes { get; set; }
        public double time { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC type { get; set; }
        public InputEvent(UnityEngine.InputSystem.Utilities.FourCC type, int sizeInBytes, int deviceId, double time = -1d) {}
        public static bool Equals(InputEvent* first, InputEvent* second);
        public override string ToString();
    }

    public struct InputEventBuffer : System.Collections.Generic.IEnumerable<InputEventPtr>, System.Collections.IEnumerable, System.ICloneable, System.IDisposable
    {
        public const long BufferSizeUnknown = -1;
        public InputEventPtr bufferPtr { get; }
        public long capacityInBytes { get; }
        public Unity.Collections.NativeArray<byte> data { get; }
        public int eventCount { get; }
        public long sizeInBytes { get; }
        public InputEventBuffer(Unity.Collections.NativeArray<byte> buffer, int eventCount, int sizeInBytes = -1) {}
        public InputEventBuffer(InputEvent* eventPtr, int eventCount, int sizeInBytes = -1, int capacityInBytes = -1) {}
        public InputEvent* AllocateEvent(int sizeInBytes, int capacityIncrementInBytes = 2048);
        public void AppendEvent(InputEvent* eventPtr, int capacityIncrementInBytes = 2048);
        public InputEventBuffer Clone();
        public bool Contains(InputEvent* eventPtr);
        public void Dispose();
        public System.Collections.Generic.IEnumerator<InputEventPtr> GetEnumerator();
        public void Reset();
    }

    public struct InputEventPtr : System.IEquatable<InputEventPtr>
    {
        public InputEvent* data { get; }
        public int deviceId { get; set; }
        public bool handled { get; set; }
        public int id { get; set; }
        public System.UInt32 sizeInBytes { get; }
        public double time { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC type { get; }
        public bool valid { get; }
        public InputEventPtr(InputEvent* eventPtr) {}
        public override bool Equals(object obj);
        public bool Equals(InputEventPtr other);
        public static InputEventPtr From(InputEvent* eventPtr);
        public static InputEvent* FromInputEventPtr(InputEventPtr eventPtr);
        public override int GetHashCode();
        public bool IsA<TOtherEvent>() where TOtherEvent : struct, IInputEventTypeInfo, new();
        public InputEventPtr Next();
        public static bool operator ==(InputEventPtr left, InputEventPtr right);
        public static InputEvent* op_Implicit(InputEventPtr eventPtr);
        public static InputEventPtr op_Implicit(InputEvent* eventPtr);
        public static bool operator !=(InputEventPtr left, InputEventPtr right);
        public InputEvent* ToPointer();
        public override string ToString();
    }

    public sealed class InputEventTrace : System.Collections.Generic.IEnumerable<InputEventPtr>, System.Collections.IEnumerable, System.IDisposable
    {
        public event System.Action<InputEventPtr> onEvent;
        public long allocatedSizeInBytes { get; }
        public int deviceId { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputEventTrace.DeviceInfo> deviceInfos { get; }
        public bool enabled { get; }
        public long eventCount { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC FrameMarkerEvent { get; }
        public long maxSizeInBytes { get; }
        public System.Func<InputEventPtr, InputDevice, bool> onFilterEvent { get; set; }
        public bool recordFrameMarkers { get; set; }
        public long totalEventSizeInBytes { get; }
        public InputEventTrace(long bufferSizeInBytes = 1048576, bool growBuffer = false, long maxBufferSizeInBytes = -1, long growIncrementSizeInBytes = -1) {}
        public InputEventTrace(InputDevice device, long bufferSizeInBytes = 1048576, bool growBuffer = false, long maxBufferSizeInBytes = -1, long growIncrementSizeInBytes = -1) {}
        public void Clear();
        public void Disable();
        public void Dispose();
        public void Enable();
        public System.Collections.Generic.IEnumerator<InputEventPtr> GetEnumerator();
        public bool GetNextEvent(ref InputEventPtr current);
        public static InputEventTrace LoadFrom(System.IO.Stream stream);
        public static InputEventTrace LoadFrom(string filePath);
        public void ReadFrom(System.IO.Stream stream);
        public void ReadFrom(string filePath);
        public InputEventTrace.ReplayController Replay();
        public bool Resize(long newBufferSize);
        public void WriteTo(System.IO.Stream stream);
        public void WriteTo(string filePath);
        public struct DeviceInfo
        {
            public int deviceId { get; set; }
            public string layout { get; set; }
            public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; set; }
            public int stateSizeInBytes { get; set; }
        }
        public class ReplayController : System.IDisposable
        {
            public System.Collections.Generic.IEnumerable<InputDevice> createdDevices { get; }
            public bool finished { get; }
            public bool paused { get; set; }
            public int position { get; }
            public InputEventTrace trace { get; }
            public void Dispose();
            public InputEventTrace.ReplayController OnEvent(System.Action<InputEventPtr> action);
            public InputEventTrace.ReplayController OnFinished(System.Action action);
            public InputEventTrace.ReplayController PlayAllEvents();
            public InputEventTrace.ReplayController PlayAllEventsAccordingToTimestamps();
            public InputEventTrace.ReplayController PlayAllFramesOneByOne();
            public InputEventTrace.ReplayController PlayOneEvent();
            public InputEventTrace.ReplayController Rewind();
            public InputEventTrace.ReplayController WithAllDevicesMappedToNewInstances();
            public InputEventTrace.ReplayController WithDeviceMappedFromTo(int recordedDeviceId, int playbackDeviceId);
            public InputEventTrace.ReplayController WithDeviceMappedFromTo(InputDevice recordedDevice, InputDevice playbackDevice);
        }
    }

    public struct InputMetrics
    {
        public float averageEventBytesPerFrame { get; }
        public double averageLagTimePerEvent { get; }
        public double averageProcessingTimePerEvent { get; }
        public int currentControlCount { get; set; }
        public int currentLayoutCount { get; set; }
        public int currentNumDevices { get; set; }
        public int currentStateSizeInBytes { get; set; }
        public int maxNumDevices { get; set; }
        public int maxStateSizeInBytes { get; set; }
        public int totalEventBytes { get; set; }
        public int totalEventCount { get; set; }
        public double totalEventLagTime { get; set; }
        public double totalEventProcessingTime { get; set; }
        public int totalUpdateCount { get; set; }
    }

    public static class InputState
    {
        public static event System.Action<InputDevice, InputEventPtr> onChange;
        public static double currentTime { get; }
        public static InputUpdateType currentUpdateType { get; }
        public static System.UInt32 updateCount { get; }
        public static void AddChangeMonitor(InputControl control, IInputStateChangeMonitor monitor, long monitorIndex = -1);
        public static IInputStateChangeMonitor AddChangeMonitor(InputControl control, System.Action<InputControl, double, InputEventPtr, long> valueChangeCallback, int monitorIndex = -1, System.Action<InputControl, double, long, int> timerExpiredCallback = default(System.Action<InputControl, double, long, int>));
        public static void AddChangeMonitorTimeout(InputControl control, IInputStateChangeMonitor monitor, double time, long monitorIndex = -1, int timerIndex = -1);
        public static void Change(InputDevice device, InputEventPtr eventPtr, InputUpdateType updateType = InputUpdateType.None);
        public static void Change<TState>(InputControl control, TState state, InputUpdateType updateType = InputUpdateType.None, InputEventPtr eventPtr = default(InputEventPtr)) where TState : struct, new();
        public static bool IsIntegerFormat(this UnityEngine.InputSystem.Utilities.FourCC format);
        public static void RemoveChangeMonitor(InputControl control, IInputStateChangeMonitor monitor, long monitorIndex = -1);
        public static void RemoveChangeMonitorTimeout(IInputStateChangeMonitor monitor, long monitorIndex = -1, int timerIndex = -1);
    }

    public struct InputStateBlock
    {
        public const System.UInt32 AutomaticOffset = 4294967294;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatBit;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatByte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatDouble;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatFloat;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatInt;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatLong;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatQuaternion;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatSBit;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatSByte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatShort;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatUInt;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatULong;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatUShort;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2Byte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2Short;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3Byte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3Short;
        public const System.UInt32 InvalidOffset = 4294967295;
        public System.UInt32 bitOffset { get; set; }
        public System.UInt32 byteOffset { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC format { get; set; }
        public System.UInt32 sizeInBits { get; set; }
        public void CopyToFrom(void* toStatePtr, void* fromStatePtr);
        public static UnityEngine.InputSystem.Utilities.FourCC GetPrimitiveFormatFromType(System.Type type);
        public static int GetSizeOfPrimitiveFormatInBits(UnityEngine.InputSystem.Utilities.FourCC type);
        public double ReadDouble(void* statePtr);
        public float ReadFloat(void* statePtr);
        public int ReadInt(void* statePtr);
        public void Write(void* statePtr, UnityEngine.InputSystem.Utilities.PrimitiveValue value);
        public void WriteDouble(void* statePtr, double value);
        public void WriteFloat(void* statePtr, float value);
        public void WriteInt(void* statePtr, int value);
    }

    public class InputStateHistory : IInputStateChangeMonitor, System.Collections.Generic.IEnumerable<InputStateHistory.Record>, System.Collections.IEnumerable, System.IDisposable
    {
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputControl> controls { get; }
        public int Count { get; }
        public int extraMemoryPerRecord { get; set; }
        public int historyDepth { get; set; }
        public InputStateHistory.Record this[int index] { get; set; }
        public System.Action<InputStateHistory.Record> onRecordAdded { get; set; }
        public System.Func<InputControl, double, InputEventPtr, bool> onShouldRecordStateChange { get; set; }
        public InputUpdateType updateMask { get; set; }
        public System.UInt32 version { get; }
        public InputStateHistory(System.Collections.Generic.IEnumerable<InputControl> controls) {}
        public InputStateHistory(int maxStateSizeInBytes) {}
        public InputStateHistory(string path) {}
        public InputStateHistory(InputControl control) {}
        public InputStateHistory.Record AddRecord(InputStateHistory.Record record);
        protected InputStateHistory.RecordHeader* AllocateRecord(out int index);
        public void Clear();
        protected void Destroy();
        public void Dispose();
        protected override void Finalize();
        public System.Collections.Generic.IEnumerator<InputStateHistory.Record> GetEnumerator();
        protected InputStateHistory.RecordHeader* GetRecord(int index);
        protected TValue ReadValue<TValue>(InputStateHistory.RecordHeader* data) where TValue : struct, new();
        protected object ReadValueAsObject(InputStateHistory.RecordHeader* data);
        protected int RecordIndexToUserIndex(int index);
        public InputStateHistory.Record RecordStateChange(InputControl control, InputEventPtr eventPtr);
        public InputStateHistory.Record RecordStateChange(InputControl control, void* statePtr, double time);
        public void StartRecording();
        public void StopRecording();
        protected int UserIndexToRecordIndex(int index);
        public struct Record : System.IEquatable<InputStateHistory.Record>
        {
            public InputControl control { get; }
            public int index { get; }
            public InputStateHistory.Record next { get; }
            public InputStateHistory owner { get; }
            public InputStateHistory.Record previous { get; }
            public double time { get; }
            public bool valid { get; }
            public void CopyFrom(InputStateHistory.Record record);
            public override bool Equals(object obj);
            public bool Equals(InputStateHistory.Record other);
            public override int GetHashCode();
            public void* GetUnsafeExtraMemoryPtr();
            public void* GetUnsafeMemoryPtr();
            public TValue ReadValue<TValue>() where TValue : struct, new();
            public object ReadValueAsObject();
            public override string ToString();
        }
        protected struct RecordHeader
        {
            public int controlIndex;
            public const int kSizeWithControlIndex = 16;
            public const int kSizeWithoutControlIndex = 12;
            public double time;
            public System.UInt32 version;
            public byte* statePtrWithControlIndex { get; }
            public byte* statePtrWithoutControlIndex { get; }
        }
    }

    public class InputStateHistory<TValue> : InputStateHistory, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.Generic.IReadOnlyCollection<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.IEnumerable where TValue : struct, new()
    {
        public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> this[int index] { get; set; }
        public InputStateHistory(System.Nullable<int> maxStateSizeInBytes = default(System.Nullable<int>)) {}
        public InputStateHistory(string path) {}
        public InputStateHistory(UnityEngine.InputSystem.InputControl<TValue> control) {}
        public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> record);
        protected override void Finalize();
        public System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>> GetEnumerator();
        public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> RecordStateChange(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, double time = -1d);
        public struct Record : System.IEquatable<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>
        {
            public UnityEngine.InputSystem.InputControl<TValue> control { get; }
            public int index { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> next { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> owner { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> previous { get; }
            public double time { get; }
            public bool valid { get; }
            public void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> record);
            public override bool Equals(object obj);
            public bool Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> other);
            public override int GetHashCode();
            public void* GetUnsafeExtraMemoryPtr();
            public void* GetUnsafeMemoryPtr();
            public TValue ReadValue();
            public override string ToString();
        }
    }

    [System.Flags] public enum InputUpdateType
    {
        BeforeRender = 4,
        Default = 11,
        Dynamic = 1,
        Editor = 8,
        Fixed = 2,
        Manual = 16,
        None = 0,
    }

    public interface ITextInputReceiver
    {
        public void OnIMECompositionChanged(IMECompositionString compositionString);
        public void OnTextInput(char character);
    }

    public struct KeyboardState : IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"AltGr", bit = 54, displayName = @"Right Alt", layout = @"Key", name = @"rightAlt", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 57, displayName = @"Left System", layout = @"Key", name = @"leftMeta", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 58, displayName = @"Right System", layout = @"Key", name = @"rightMeta", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Space", layout = @"Key", name = @"space")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 10, displayName = @"\", layout = @"Key", name = @"backslash")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 100, displayName = @"F7", layout = @"Key", name = @"f7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 101, displayName = @"F8", layout = @"Key", name = @"f8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 102, displayName = @"F9", layout = @"Key", name = @"f9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 103, displayName = @"F10", layout = @"Key", name = @"f10")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 104, displayName = @"F11", layout = @"Key", name = @"f11")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 105, displayName = @"F12", layout = @"Key", name = @"f12")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 106, layout = @"Key", name = @"OEM1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 107, layout = @"Key", name = @"OEM2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 108, layout = @"Key", name = @"OEM3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 109, layout = @"Key", name = @"OEM4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 11, displayName = @"[", layout = @"Key", name = @"leftBracket")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 110, layout = @"Key", name = @"OEM5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 111, layout = @"Button", name = @"IMESelected", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(bit = 12, displayName = @"]", layout = @"Key", name = @"rightBracket")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 13, displayName = @"-", layout = @"Key", name = @"minus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 14, displayName = @"=", layout = @"Key", name = @"equals")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 15, displayName = @"A", layout = @"Key", name = @"a")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 16, displayName = @"B", layout = @"Key", name = @"b")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 17, displayName = @"C", layout = @"Key", name = @"c")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 18, displayName = @"D", layout = @"Key", name = @"d")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 19, displayName = @"E", layout = @"Key", name = @"e")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Enter", layout = @"Key", name = @"enter", usage = @"Submit")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 20, displayName = @"F", layout = @"Key", name = @"f")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 21, displayName = @"G", layout = @"Key", name = @"g")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 22, displayName = @"H", layout = @"Key", name = @"h")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 23, displayName = @"I", layout = @"Key", name = @"i")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 24, displayName = @"J", layout = @"Key", name = @"j")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 25, displayName = @"K", layout = @"Key", name = @"k")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 26, displayName = @"L", layout = @"Key", name = @"l")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 27, displayName = @"M", layout = @"Key", name = @"m")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 28, displayName = @"N", layout = @"Key", name = @"n")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 29, displayName = @"O", layout = @"Key", name = @"o")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Tab", layout = @"Key", name = @"tab")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 30, displayName = @"P", layout = @"Key", name = @"p")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 31, displayName = @"Q", layout = @"Key", name = @"q")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 32, displayName = @"R", layout = @"Key", name = @"r")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 33, displayName = @"S", layout = @"Key", name = @"s")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 34, displayName = @"T", layout = @"Key", name = @"t")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 35, displayName = @"U", layout = @"Key", name = @"u")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 36, displayName = @"V", layout = @"Key", name = @"v")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 37, displayName = @"W", layout = @"Key", name = @"w")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 38, displayName = @"X", layout = @"Key", name = @"x")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 39, displayName = @"Y", layout = @"Key", name = @"y")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"`", layout = @"Key", name = @"backquote")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 40, displayName = @"Z", layout = @"Key", name = @"z")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 41, displayName = @"1", layout = @"Key", name = @"1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 42, displayName = @"2", layout = @"Key", name = @"2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 43, displayName = @"3", layout = @"Key", name = @"3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 44, displayName = @"4", layout = @"Key", name = @"4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 45, displayName = @"5", layout = @"Key", name = @"5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 46, displayName = @"6", layout = @"Key", name = @"6")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 47, displayName = @"7", layout = @"Key", name = @"7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 48, displayName = @"8", layout = @"Key", name = @"8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 49, displayName = @"9", layout = @"Key", name = @"9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 5, displayName = @"'", layout = @"Key", name = @"quote")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 50, displayName = @"0", layout = @"Key", name = @"0")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 51, displayName = @"Left Shift", layout = @"Key", name = @"leftShift", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 51, displayName = @"Shift", layout = @"DiscreteButton", name = @"shift", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 52, displayName = @"Right Shift", layout = @"Key", name = @"rightShift", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 53, displayName = @"Alt", layout = @"DiscreteButton", name = @"alt", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 53, displayName = @"Left Alt", layout = @"Key", name = @"leftAlt", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 55, displayName = @"Control", layout = @"DiscreteButton", name = @"ctrl", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 55, displayName = @"Left Control", layout = @"Key", name = @"leftCtrl", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 56, displayName = @"Right Control", layout = @"Key", name = @"rightCtrl", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 59, displayName = @"Context Menu", layout = @"Key", name = @"contextMenu", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 6, displayName = @";", layout = @"Key", name = @"semicolon")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 60, displayName = @"Escape", layout = @"Key", name = @"escape", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(bit = 61, displayName = @"Left Arrow", layout = @"Key", name = @"leftArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 62, displayName = @"Right Arrow", layout = @"Key", name = @"rightArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 63, displayName = @"Up Arrow", layout = @"Key", name = @"upArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 64, displayName = @"Down Arrow", layout = @"Key", name = @"downArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 65, displayName = @"Backspace", layout = @"Key", name = @"backspace")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 66, displayName = @"Page Down", layout = @"Key", name = @"pageDown")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 67, displayName = @"Page Up", layout = @"Key", name = @"pageUp")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 68, displayName = @"Home", layout = @"Key", name = @"home")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 69, displayName = @"End", layout = @"Key", name = @"end")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 7, displayName = @",", layout = @"Key", name = @"comma")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 70, displayName = @"Insert", layout = @"Key", name = @"insert")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 71, displayName = @"Delete", layout = @"Key", name = @"delete")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 72, displayName = @"Caps Lock", layout = @"Key", name = @"capsLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 73, displayName = @"Num Lock", layout = @"Key", name = @"numLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 74, displayName = @"Print Screen", layout = @"Key", name = @"printScreen")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 75, displayName = @"Scroll Lock", layout = @"Key", name = @"scrollLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 76, displayName = @"Pause/Break", layout = @"Key", name = @"pause")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 77, displayName = @"Numpad Enter", layout = @"Key", name = @"numpadEnter")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 78, displayName = @"Numpad /", layout = @"Key", name = @"numpadDivide")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 79, displayName = @"Numpad *", layout = @"Key", name = @"numpadMultiply")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 8, displayName = @".", layout = @"Key", name = @"period")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 80, displayName = @"Numpad +", layout = @"Key", name = @"numpadPlus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 81, displayName = @"Numpad -", layout = @"Key", name = @"numpadMinus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 82, displayName = @"Numpad .", layout = @"Key", name = @"numpadPeriod")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 83, displayName = @"Numpad =", layout = @"Key", name = @"numpadEquals")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 84, displayName = @"Numpad 0", layout = @"Key", name = @"numpad0")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 85, displayName = @"Numpad 1", layout = @"Key", name = @"numpad1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 86, displayName = @"Numpad 2", layout = @"Key", name = @"numpad2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 87, displayName = @"Numpad 3", layout = @"Key", name = @"numpad3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 88, displayName = @"Numpad 4", layout = @"Key", name = @"numpad4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 89, displayName = @"Numpad 5", layout = @"Key", name = @"numpad5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 9, displayName = @"/", layout = @"Key", name = @"slash")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 90, displayName = @"Numpad 6", layout = @"Key", name = @"numpad6")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 91, displayName = @"Numpad 7", layout = @"Key", name = @"numpad7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 92, displayName = @"Numpad 8", layout = @"Key", name = @"numpad8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 93, displayName = @"Numpad 9", layout = @"Key", name = @"numpad9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 94, displayName = @"F1", layout = @"Key", name = @"f1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 95, displayName = @"F2", layout = @"Key", name = @"f2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 96, displayName = @"F3", layout = @"Key", name = @"f3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 97, displayName = @"F4", layout = @"Key", name = @"f4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 98, displayName = @"F5", layout = @"Key", name = @"f5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 99, displayName = @"F6", layout = @"Key", name = @"f6")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Any Key", layout = @"AnyKey", name = @"anyKey", sizeInBits = 109, synthetic = true)] public fixed byte keys[14];
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public KeyboardState(params Key[] pressedKeys) {}
        public void Press(Key key);
        public void Release(Key key);
        public void Set(Key key, bool state);
    }

    public enum MouseButton
    {
        Back = 4,
        Forward = 3,
        Left = 0,
        Middle = 2,
        Right = 1,
    }

    public struct MouseState : IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Left Button", layout = @"Button", name = @"leftButton", shortDisplayName = @"LMB", usage = @"PrimaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Right Button", layout = @"Button", name = @"rightButton", shortDisplayName = @"RMB", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Middle Button", layout = @"Button", name = @"middleButton", shortDisplayName = @"MMB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Forward", layout = @"Button", name = @"forwardButton", usage = @"Forward")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"Back", layout = @"Button", name = @"backButton", usage = @"Back")] [UnityEngine.InputSystem.Layouts.InputControl(format = @"BIT", layout = @"Digital", name = @"pointerId", offset = 4294967294, sizeInBits = 1)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"FLT", layout = @"Axis", name = @"pressure", offset = 4294967294, sizeInBits = 32, usage = @"Pressure")] [UnityEngine.InputSystem.Layouts.InputControl(format = @"VEC2", layout = @"Vector2", name = @"radius", offset = 4294967294, sizeInBits = 64, usage = @"Radius")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"press", synthetic = true, usages = Mono.Cecil.CustomAttributeArgument[], useStateFrom = @"leftButton")] public System.UInt16 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Click Count", layout = @"Integer", synthetic = true)] public System.UInt16 clickCount;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Secondary2DMotion")] public Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Point")] public Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], displayName = @"Left/Right", name = @"scroll/x", usage = @"ScrollHorizontal")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], displayName = @"Up/Down", name = @"scroll/y", shortDisplayName = @"Wheel", usage = @"ScrollVertical")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Scroll")] public Vector2 scroll;
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public MouseState WithButton(MouseButton button, bool state = true);
    }

    public struct PenState : IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelFirst", bit = 2, displayName = @"Barrel Button #1", layout = @"Button", name = @"barrel1", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelFourth", bit = 6, displayName = @"Barrel Button #4", layout = @"Button", name = @"barrel4")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelSecond", bit = 3, displayName = @"Barrel Button #2", layout = @"Button", name = @"barrel2")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelThird", bit = 5, displayName = @"Barrel Button #3", layout = @"Button", name = @"barrel3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Tip", layout = @"Button", name = @"tip", usage = @"PrimaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Eraser", layout = @"Button", name = @"eraser")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"In Range?", layout = @"Button", name = @"inRange", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"UINT", layout = @"Digital", name = @"pointerId", offset = 4294967294, sizeInBits = 32)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"VEC2", layout = @"Vector2", name = @"radius", offset = 4294967294, sizeInBits = 64, usage = @"Radius")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"press", synthetic = true, usages = Mono.Cecil.CustomAttributeArgument[], useStateFrom = @"tip")] public System.UInt16 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Secondary2DMotion")] public Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Point")] public Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(defaultState = 0f, layout = @"Analog", usage = @"Pressure")] public float pressure;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Tilt", layout = @"Vector2", usage = @"Tilt")] public Vector2 tilt;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Twist", layout = @"Axis", usage = @"Twist")] public float twist;
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public PenState WithButton(PenButton button, bool state = true);
    }

    public struct QueryCanRunInBackground : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public bool canRunInBackground;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryCanRunInBackground Create();
    }

    public struct QueryDimensionsCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public Vector2 outDimensions;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryDimensionsCommand Create();
    }

    public struct QueryEnabledStateCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public bool isEnabled;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryEnabledStateCommand Create();
    }

    public struct QueryKeyboardLayoutCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public fixed byte nameBuffer[256];
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryKeyboardLayoutCommand Create();
        public string ReadLayoutName();
        public void WriteLayoutName(string name);
    }

    public struct QueryKeyNameCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public fixed byte nameBuffer[256];
        public int scanOrKeyCode;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryKeyNameCommand Create(Key key);
        public string ReadKeyName();
    }

    public struct QueryPairedUserAccountCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public System.UInt64 handle;
        public string id { get; set; }
        public string name { get; set; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static QueryPairedUserAccountCommand Create();
        [System.Flags] public enum Result
        {
            DevicePairedToUserAccount = 2,
            UserAccountSelectionCanceled = 16,
            UserAccountSelectionComplete = 8,
            UserAccountSelectionInProgress = 4,
        }
    }

    public struct RequestResetCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static RequestResetCommand Create();
    }

    public struct RequestSyncCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static RequestSyncCommand Create();
    }

    public struct SetIMECursorPositionCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public Vector2 position { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static SetIMECursorPositionCommand Create(Vector2 cursorPosition);
    }

    public struct SetSamplingFrequencyCommand : IInputDeviceCommandInfo
    {
        public InputDeviceCommand baseCommand;
        public float frequency;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static SetSamplingFrequencyCommand Create(float frequency);
    }

    public struct StateEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat;
        public const int Type = 1398030676;
        public void* state { get; }
        public System.UInt32 stateSizeInBytes { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static StateEvent* From(InputEventPtr ptr);
        public static Unity.Collections.NativeArray<byte> From(InputDevice device, out InputEventPtr eventPtr, Unity.Collections.Allocator allocator = Unity.Collections.Allocator.Temp);
        public static int GetEventSizeWithPayload<TState>() where TState : struct, new();
        public InputEventPtr ToEventPtr();
    }

    public struct TextEvent : IInputEventTypeInfo
    {
        public InputEvent baseEvent;
        public int character;
        public const int Type = 1413830740;
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static TextEvent Create(int deviceId, char character, double time = -1d);
        public static TextEvent Create(int deviceId, int character, double time = -1d);
        public static TextEvent* From(InputEventPtr eventPtr);
    }

    public struct TouchState : IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Delta")] public Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Indirect Touch?", layout = @"Button", name = @"indirectTouch", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(bit = 5, displayName = @"Tap", layout = @"Button", name = @"tap")] public byte flags;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch Contact?", layout = @"TouchPress", name = @"press", useStateFrom = @"phase")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch Phase", layout = @"TouchPhase", name = @"phase", synthetic = true)] public byte phaseId;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Position")] public Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Pressure", layout = @"Axis")] public float pressure;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Radius")] public Vector2 radius;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Start Position", synthetic = true)] public Vector2 startPosition;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Start Time", layout = @"Double", synthetic = true)] public double startTime;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Tap Count", layout = @"Integer", name = @"tapCount")] public byte tapCount;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch ID", layout = @"Integer", synthetic = true)] public int touchId;
        public UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public bool isIndirectTouch { get; set; }
        public bool isInProgress { get; }
        public bool isNoneEndedOrCanceled { get; }
        public bool isPrimaryTouch { get; set; }
        public bool isTap { get; set; }
        public TouchPhase phase { get; set; }
        public override string ToString();
    }
}

namespace UnityEngine.InputSystem.OnScreen
{
    [AddComponentMenu(@"Input/On-Screen Button")] public class OnScreenButton : OnScreenControl, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IPointerDownHandler, UnityEngine.EventSystems.IPointerUpHandler
    {
        protected override string controlPathInternal { get; set; }
        public OnScreenButton() {}
        public void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
        public void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    }

    public abstract class OnScreenControl : MonoBehaviour
    {
        public InputControl control { get; }
        public string controlPath { get; set; }
        protected abstract string controlPathInternal { get; set; }
        protected OnScreenControl() {}
        protected void SendValueToControl<TValue>(TValue value) where TValue : struct, new();
    }

    [AddComponentMenu(@"Input/On-Screen Stick")] public class OnScreenStick : OnScreenControl, UnityEngine.EventSystems.IDragHandler, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IPointerDownHandler, UnityEngine.EventSystems.IPointerUpHandler
    {
        protected override string controlPathInternal { get; set; }
        public float movementRange { get; set; }
        public OnScreenStick() {}
        public void OnDrag(UnityEngine.EventSystems.PointerEventData eventData);
        public void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
        public void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    }
}

namespace UnityEngine.InputSystem.Processors
{
    [UnityEngine.Scripting.Preserve] public class ScaleVector2Processor : UnityEngine.InputSystem.InputProcessor<Vector2>
    {
        [Tooltip(@"Scale factor to multiple the incoming Vector2's X component by.")] public float x = 1f;
        [Tooltip(@"Scale factor to multiple the incoming Vector2's Y component by.")] public float y = 1f;
        public ScaleVector2Processor() {}
        public override Vector2 Process(Vector2 value, InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public class ScaleVector3Processor : UnityEngine.InputSystem.InputProcessor<Vector3>
    {
        public float x = 1f;
        public float y = 1f;
        public float z = 1f;
        public ScaleVector3Processor() {}
        public override Vector3 Process(Vector3 value, InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public class StickDeadzoneProcessor : UnityEngine.InputSystem.InputProcessor<Vector2>
    {
        public float max;
        public float min;
        public StickDeadzoneProcessor() {}
        public override Vector2 Process(Vector2 value, InputControl control = default(InputControl));
    }
}

namespace UnityEngine.InputSystem.Steam
{
    public interface ISteamControllerAPI
    {
        public void ActivateActionSet(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> actionSetHandle);
        public void ActivateActionSetLayer(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> actionSetLayerHandle);
        public void DeactivateActionSetLayer(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> actionSetLayerHandle);
        public void DeactivateAllActionSetLayers(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle);
        public UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> GetActionSetHandle(string actionSetName);
        public int GetActiveActionSetLayers(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, out UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> handlesOut);
        public SteamAnalogActionData GetAnalogActionData(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, UnityEngine.InputSystem.Steam.SteamHandle<InputAction> analogActionHandle);
        public UnityEngine.InputSystem.Steam.SteamHandle<InputAction> GetAnalogActionHandle(string actionName);
        public int GetConnectedControllers(UnityEngine.InputSystem.Steam.SteamHandle<SteamController>[] outHandles);
        public UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> GetCurrentActionSet(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle);
        public SteamDigitalActionData GetDigitalActionData(UnityEngine.InputSystem.Steam.SteamHandle<SteamController> controllerHandle, UnityEngine.InputSystem.Steam.SteamHandle<InputAction> digitalActionHandle);
        public UnityEngine.InputSystem.Steam.SteamHandle<InputAction> GetDigitalActionHandle(string actionName);
        public void RunFrame();
    }

    public struct SteamAnalogActionData
    {
        public bool active { get; set; }
        public Vector2 position { get; set; }
    }

    [UnityEngine.Scripting.Preserve] public abstract class SteamController : InputDevice
    {
        public bool autoActivateSets { get; set; }
        public UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> currentSteamActionSet { get; }
        public abstract UnityEngine.InputSystem.Utilities.ReadOnlyArray<SteamController.SteamActionSetInfo> steamActionSets { get; }
        public UnityEngine.InputSystem.Steam.SteamHandle<SteamController> steamControllerHandle { get; }
        protected SteamController() {}
        public void ActivateSteamActionSet(UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> actionSet);
        protected abstract void ResolveSteamActions(ISteamControllerAPI api);
        protected abstract void Update(ISteamControllerAPI api);
        public struct SteamActionSetInfo
        {
            public UnityEngine.InputSystem.Steam.SteamHandle<InputActionMap> handle { get; set; }
            public string name { get; set; }
        }
    }

    public struct SteamDigitalActionData
    {
        public bool active { get; set; }
        public bool pressed { get; set; }
    }

    public struct SteamHandle<TObject> : System.IEquatable<UnityEngine.InputSystem.Steam.SteamHandle<TObject>>
    {
        public SteamHandle(System.UInt64 handle) {}
        public override bool Equals(object obj);
        public bool Equals(UnityEngine.InputSystem.Steam.SteamHandle<TObject> other);
        public override int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.Steam.SteamHandle<TObject> a, UnityEngine.InputSystem.Steam.SteamHandle<TObject> b);
        public static System.UInt64 op_Explicit(UnityEngine.InputSystem.Steam.SteamHandle<TObject> handle);
        public static bool operator !=(UnityEngine.InputSystem.Steam.SteamHandle<TObject> a, UnityEngine.InputSystem.Steam.SteamHandle<TObject> b);
        public override string ToString();
    }
}

namespace UnityEngine.InputSystem.Steam.Editor
{
    public static class SteamIGAConverter
    {
        public static string ConvertInputActionsToSteamIGA(System.Collections.Generic.IEnumerable<InputActionMap> actionMaps, string locale = @"english");
        public static string ConvertInputActionsToSteamIGA(InputActionAsset asset, string locale = @"english");
        public static string GenerateInputDeviceFromSteamIGA(string vdf, string namespaceAndClassName);
        public static string GetSteamControllerInputType(InputAction action);
        public static System.Collections.Generic.Dictionary<string, object> ParseVDF(string vdf);
    }
}

namespace UnityEngine.InputSystem.Switch
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Switch Pro Controller", stateType = typeof(LowLevel.SwitchProControllerHIDInputState))] [UnityEngine.Scripting.Preserve] public class SwitchProControllerHID : Gamepad
    {
        public SwitchProControllerHID() {}
    }
}

namespace UnityEngine.InputSystem.UI
{
    public class ExtendedPointerEventData : UnityEngine.EventSystems.PointerEventData
    {
        public InputDevice device { get; set; }
        public UIPointerType pointerType { get; set; }
        public int touchId { get; set; }
        public Quaternion trackedDeviceOrientation { get; set; }
        public Vector3 trackedDevicePosition { get; set; }
        public ExtendedPointerEventData(UnityEngine.EventSystems.EventSystem eventSystem) {}
        public override string ToString();
    }

    public class InputSystemUIInputModule : UnityEngine.EventSystems.BaseInputModule
    {
        public InputActionAsset actionsAsset { get; set; }
        public InputActionReference cancel { get; set; }
        public bool deselectOnBackgroundClick { get; set; }
        public InputActionReference leftClick { get; set; }
        public InputActionReference middleClick { get; set; }
        public InputActionReference move { get; set; }
        public float moveRepeatDelay { get; set; }
        public float moveRepeatRate { get; set; }
        public InputActionReference point { get; set; }
        public UIPointerBehavior pointerBehavior { get; set; }
        [System.Obsolete(@"'repeatDelay' has been obsoleted; use 'moveRepeatDelay' instead. (UnityUpgradable) -> moveRepeatDelay", false)] public float repeatDelay { get; set; }
        [System.Obsolete(@"'repeatRate' has been obsoleted; use 'moveRepeatRate' instead. (UnityUpgradable) -> moveRepeatRate", false)] public float repeatRate { get; set; }
        public InputActionReference rightClick { get; set; }
        public InputActionReference scrollWheel { get; set; }
        public InputActionReference submit { get; set; }
        public float trackedDeviceDragThresholdMultiplier { get; set; }
        public InputActionReference trackedDeviceOrientation { get; set; }
        public InputActionReference trackedDevicePosition { get; set; }
        [System.Obsolete(@"'trackedDeviceSelect' has been obsoleted; use 'leftClick' instead.", true)] public InputActionReference trackedDeviceSelect { get; set; }
        public InputSystemUIInputModule() {}
        public override void ActivateModule();
        protected override void Awake();
        public override bool IsPointerOverGameObject(int pointerOrTouchId);
        protected override void OnDestroy();
        protected override void OnDisable();
        protected override void OnEnable();
        public override void Process();
    }

    public class MultiplayerEventSystem : UnityEngine.EventSystems.EventSystem
    {
        public GameObject playerRoot { get; set; }
        public MultiplayerEventSystem() {}
        protected override void Update();
    }

    [AddComponentMenu(@"Event/Tracked Device Raycaster")] [RequireComponent(typeof(Canvas))] public class TrackedDeviceRaycaster : UnityEngine.EventSystems.BaseRaycaster
    {
        public LayerMask blockingMask { get; set; }
        public bool checkFor2DOcclusion { get; set; }
        public bool checkFor3DOcclusion { get; set; }
        public override Camera eventCamera { get; }
        public bool ignoreReversedGraphics { get; set; }
        public float maxDistance { get; set; }
        public TrackedDeviceRaycaster() {}
        protected override void OnDisable();
        protected override void OnEnable();
        public override void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult> resultAppendList);
    }

    public enum UIPointerBehavior
    {
        AllPointersAsIs = 2,
        SingleMouseOrPenButMultiTouchAndTrack = 0,
        SingleUnifiedPointer = 1,
    }

    public enum UIPointerType
    {
        MouseOrPen = 1,
        None = 0,
        Touch = 2,
        Tracked = 3,
    }
}

namespace UnityEngine.InputSystem.Users
{
    public struct InputUser : System.IEquatable<InputUser>
    {
        public const System.UInt32 InvalidId = 0;
        public static event System.Action<InputUser, InputUserChange, InputDevice> onChange;
        public static event System.Action<InputControl, UnityEngine.InputSystem.LowLevel.InputEventPtr> onUnpairedDeviceUsed;
        public IInputActionCollection actions { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputUser> all { get; }
        public System.Nullable<InputControlScheme> controlScheme { get; }
        public InputControlScheme.MatchResult controlSchemeMatch { get; }
        public bool hasMissingRequiredDevices { get; }
        public System.UInt32 id { get; }
        public int index { get; }
        public static int listenForUnpairedDeviceActivity { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> lostDevices { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<InputDevice> pairedDevices { get; }
        public System.Nullable<InputUserAccountHandle> platformUserAccountHandle { get; }
        public string platformUserAccountId { get; }
        public string platformUserAccountName { get; }
        public bool valid { get; }
        public InputUser.ControlSchemeChangeSyntax ActivateControlScheme(string schemeName);
        public InputUser.ControlSchemeChangeSyntax ActivateControlScheme(InputControlScheme scheme);
        public void AssociateActionsWithUser(IInputActionCollection actions);
        public static InputUser CreateUserWithoutPairedDevices();
        public override bool Equals(object obj);
        public bool Equals(InputUser other);
        public static System.Nullable<InputUser> FindUserByAccount(InputUserAccountHandle platformUserAccountHandle);
        public static System.Nullable<InputUser> FindUserPairedToDevice(InputDevice device);
        public override int GetHashCode();
        public static UnityEngine.InputSystem.InputControlList<InputDevice> GetUnpairedInputDevices();
        public static int GetUnpairedInputDevices(ref UnityEngine.InputSystem.InputControlList<InputDevice> list);
        public static bool operator ==(InputUser left, InputUser right);
        public static bool operator !=(InputUser left, InputUser right);
        public static InputUser PerformPairingWithDevice(InputDevice device, InputUser user = default(InputUser), InputUserPairingOptions options = InputUserPairingOptions.None);
        public void UnpairDevice(InputDevice device);
        public void UnpairDevices();
        public void UnpairDevicesAndRemoveUser();
        public struct ControlSchemeChangeSyntax
        {
            public InputUser.ControlSchemeChangeSyntax AndPairRemainingDevices();
        }
    }

    public struct InputUserAccountHandle : System.IEquatable<InputUserAccountHandle>
    {
        public string apiName { get; }
        public System.UInt64 handle { get; }
        public InputUserAccountHandle(string apiName, System.UInt64 handle) {}
        public override bool Equals(object obj);
        public bool Equals(InputUserAccountHandle other);
        public override int GetHashCode();
        public static bool operator ==(InputUserAccountHandle left, InputUserAccountHandle right);
        public static bool operator !=(InputUserAccountHandle left, InputUserAccountHandle right);
        public override string ToString();
    }

    public enum InputUserChange
    {
        AccountChanged = 6,
        AccountNameChanged = 7,
        AccountSelectionCanceled = 9,
        AccountSelectionComplete = 10,
        AccountSelectionInProgress = 8,
        Added = 0,
        ControlsChanged = 12,
        ControlSchemeChanged = 11,
        DeviceLost = 4,
        DevicePaired = 2,
        DeviceRegained = 5,
        DeviceUnpaired = 3,
        Removed = 1,
    }

    [System.Flags] public enum InputUserPairingOptions
    {
        ForceNoPlatformUserAccountSelection = 2,
        ForcePlatformUserAccountSelection = 1,
        None = 0,
        UnpairCurrentDevicesFromUser = 8,
    }
}

namespace UnityEngine.InputSystem.Utilities
{
    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = true)] public class DisplayStringFormatAttribute : System.Attribute
    {
        public string formatString { get; set; }
        public DisplayStringFormatAttribute(string formatString) {}
    }

    public struct FourCC : System.IEquatable<FourCC>
    {
        public FourCC(int code) {}
        public FourCC(string str) {}
        public FourCC(char a, char b =  , char c =  , char d =  ) {}
        public override bool Equals(object obj);
        public bool Equals(FourCC other);
        public static FourCC FromInt32(int i);
        public override int GetHashCode();
        public static bool operator ==(FourCC left, FourCC right);
        public static int op_Implicit(FourCC fourCC);
        public static FourCC op_Implicit(int i);
        public static bool operator !=(FourCC left, FourCC right);
        public static int ToInt32(FourCC fourCC);
        public override string ToString();
    }

    public sealed class InputActionTrace : System.Collections.Generic.IEnumerable<InputActionTrace.ActionEventPtr>, System.Collections.IEnumerable, System.IDisposable
    {
        public UnityEngine.InputSystem.LowLevel.InputEventBuffer buffer { get; }
        public int count { get; }
        public InputActionTrace() {}
        public InputActionTrace(InputAction action) {}
        public InputActionTrace(InputActionMap actionMap) {}
        public void Clear();
        public void Dispose();
        protected override void Finalize();
        public System.Collections.Generic.IEnumerator<InputActionTrace.ActionEventPtr> GetEnumerator();
        public void RecordAction(InputAction.CallbackContext context);
        public void SubscribeTo(InputAction action);
        public void SubscribeTo(InputActionMap actionMap);
        public void SubscribeToAll();
        public override string ToString();
        public void UnsubscribeFrom(InputAction action);
        public void UnsubscribeFrom(InputActionMap actionMap);
        public void UnsubscribeFromAll();
        public struct ActionEventPtr
        {
            public InputAction action { get; }
            public InputControl control { get; }
            public double duration { get; }
            public IInputInteraction interaction { get; }
            public InputActionPhase phase { get; }
            public double startTime { get; }
            public double time { get; }
            public int valueSizeInBytes { get; }
            public TValue ReadValue<TValue>() where TValue : struct, new();
            public void ReadValue(void* buffer, int bufferSize);
            public object ReadValueAsObject();
            public override string ToString();
        }
    }

    public struct InternedString : System.IComparable<InternedString>, System.IEquatable<InternedString>
    {
        public int length { get; }
        public InternedString(string text) {}
        public int CompareTo(InternedString other);
        public override bool Equals(object obj);
        public bool Equals(InternedString other);
        public override int GetHashCode();
        public bool IsEmpty();
        public static bool operator ==(string a, InternedString b);
        public static bool operator ==(InternedString a, string b);
        public static bool operator ==(InternedString a, InternedString b);
        public static bool operator >(InternedString left, InternedString right);
        public static string op_Implicit(InternedString str);
        public static bool operator !=(string a, InternedString b);
        public static bool operator !=(InternedString a, string b);
        public static bool operator !=(InternedString a, InternedString b);
        public static bool operator <(InternedString left, InternedString right);
        public string ToLower();
        public override string ToString();
    }

    public struct NameAndParameters
    {
        public string name { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<NamedValue> parameters { get; set; }
        public static NameAndParameters Parse(string text);
        public static System.Collections.Generic.IEnumerable<NameAndParameters> ParseMultiple(string text);
        public override string ToString();
    }

    public struct NamedValue : System.IEquatable<NamedValue>
    {
        public const string Separator = @",";
        public string name { get; set; }
        public System.TypeCode type { get; }
        public PrimitiveValue value { get; set; }
        public static void ApplyAllToObject<TParameterList>(object instance, TParameterList parameters) where TParameterList : System.Collections.Generic.IEnumerable<NamedValue>;
        public void ApplyToObject(object instance);
        public NamedValue ConvertTo(System.TypeCode type);
        public override bool Equals(object obj);
        public bool Equals(NamedValue other);
        public static NamedValue From<TValue>(string name, TValue value) where TValue : struct, new();
        public override int GetHashCode();
        public static bool operator ==(NamedValue left, NamedValue right);
        public static bool operator !=(NamedValue left, NamedValue right);
        public static NamedValue Parse(string str);
        public static NamedValue[] ParseMultiple(string parameterString);
        public override string ToString();
    }

    public struct PrimitiveValue : System.IConvertible, System.IEquatable<PrimitiveValue>
    {
        public bool isEmpty { get; }
        public System.TypeCode type { get; }
        public PrimitiveValue(bool value) {}
        public PrimitiveValue(byte value) {}
        public PrimitiveValue(char value) {}
        public PrimitiveValue(double value) {}
        public PrimitiveValue(short value) {}
        public PrimitiveValue(int value) {}
        public PrimitiveValue(long value) {}
        public PrimitiveValue(System.SByte value) {}
        public PrimitiveValue(float value) {}
        public PrimitiveValue(System.UInt16 value) {}
        public PrimitiveValue(System.UInt32 value) {}
        public PrimitiveValue(System.UInt64 value) {}
        public PrimitiveValue ConvertTo(System.TypeCode type);
        public override bool Equals(object obj);
        public bool Equals(PrimitiveValue other);
        public static PrimitiveValue From<TValue>(TValue value) where TValue : struct, new();
        public static PrimitiveValue FromBoolean(bool value);
        public static PrimitiveValue FromByte(byte value);
        public static PrimitiveValue FromChar(char value);
        public static PrimitiveValue FromDouble(double value);
        public static PrimitiveValue FromInt16(short value);
        public static PrimitiveValue FromInt32(int value);
        public static PrimitiveValue FromInt64(long value);
        public static PrimitiveValue FromObject(object value);
        public static PrimitiveValue FromSByte(System.SByte value);
        public static PrimitiveValue FromSingle(float value);
        public static PrimitiveValue FromString(string value);
        public static PrimitiveValue FromUInt16(System.UInt16 value);
        public static PrimitiveValue FromUInt32(System.UInt32 value);
        public static PrimitiveValue FromUInt64(System.UInt64 value);
        public override int GetHashCode();
        public System.TypeCode GetTypeCode();
        public static bool operator ==(PrimitiveValue left, PrimitiveValue right);
        public static PrimitiveValue op_Implicit(bool value);
        public static PrimitiveValue op_Implicit(byte value);
        public static PrimitiveValue op_Implicit(char value);
        public static PrimitiveValue op_Implicit(double value);
        public static PrimitiveValue op_Implicit(short value);
        public static PrimitiveValue op_Implicit(int value);
        public static PrimitiveValue op_Implicit(long value);
        public static PrimitiveValue op_Implicit(System.SByte value);
        public static PrimitiveValue op_Implicit(float value);
        public static PrimitiveValue op_Implicit(System.UInt16 value);
        public static PrimitiveValue op_Implicit(System.UInt32 value);
        public static PrimitiveValue op_Implicit(System.UInt64 value);
        public static bool operator !=(PrimitiveValue left, PrimitiveValue right);
        public bool ToBoolean(System.IFormatProvider provider = default(System.IFormatProvider));
        public byte ToByte(System.IFormatProvider provider = default(System.IFormatProvider));
        public char ToChar(System.IFormatProvider provider = default(System.IFormatProvider));
        public System.DateTime ToDateTime(System.IFormatProvider provider = default(System.IFormatProvider));
        public System.Decimal ToDecimal(System.IFormatProvider provider = default(System.IFormatProvider));
        public double ToDouble(System.IFormatProvider provider = default(System.IFormatProvider));
        public short ToInt16(System.IFormatProvider provider = default(System.IFormatProvider));
        public int ToInt32(System.IFormatProvider provider = default(System.IFormatProvider));
        public long ToInt64(System.IFormatProvider provider = default(System.IFormatProvider));
        public object ToObject();
        public System.SByte ToSByte(System.IFormatProvider provider = default(System.IFormatProvider));
        public float ToSingle(System.IFormatProvider provider = default(System.IFormatProvider));
        public override string ToString();
        public string ToString(System.IFormatProvider provider);
        public object ToType(System.Type conversionType, System.IFormatProvider provider);
        public System.UInt16 ToUInt16(System.IFormatProvider provider = default(System.IFormatProvider));
        public System.UInt32 ToUInt32(System.IFormatProvider provider = default(System.IFormatProvider));
        public System.UInt64 ToUInt64(System.IFormatProvider provider = default(System.IFormatProvider));
    }

    public struct ReadOnlyArray<TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.Generic.IReadOnlyList<TValue>, System.Collections.IEnumerable
    {
        public int Count { get; }
        public TValue this[int index] { get; }
        public ReadOnlyArray(TValue[] array) {}
        public ReadOnlyArray(TValue[] array, int index, int length) {}
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
        public int IndexOf(System.Predicate<TValue> predicate);
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> op_Implicit(TValue[] array);
        public TValue[] ToArray();
    }

    public static class ReadOnlyArrayExtensions
    {
        public static bool Contains<TValue>(this UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : System.IComparable<TValue>;
        public static bool ContainsReference<TValue>(this UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : class;
        public static int IndexOfReference<TValue>(this UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : class;
    }

    public struct Vector2MagnitudeComparer : System.Collections.Generic.IComparer<Vector2>
    {
        public int Compare(Vector2 x, Vector2 y);
    }

    public struct Vector3MagnitudeComparer : System.Collections.Generic.IComparer<Vector3>
    {
        public int Compare(Vector3 x, Vector3 y);
    }
}

namespace UnityEngine.InputSystem.WebGL
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"WebGL Gamepad ("standard" mapping)", stateType = typeof(LowLevel.WebGLGamepadState))] [UnityEngine.Scripting.Preserve] public class WebGLGamepad : Gamepad
    {
        public WebGLGamepad() {}
    }

    [UnityEngine.Scripting.Preserve] public class WebGLJoystick : Joystick
    {
        public WebGLJoystick() {}
    }
}

namespace UnityEngine.InputSystem.XInput
{
    public interface IXboxOneRumble : UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public void SetMotorSpeeds(float lowFrequency, float highFrequency, float leftTrigger, float rightTrigger);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Xbox Controller")] [UnityEngine.Scripting.Preserve] public class XInputController : Gamepad
    {
        public XInputController.DeviceFlags flags { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"menu", displayName = @"Menu", name = @"start")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"view", displayName = @"View", name = @"select")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"A", name = @"buttonSouth")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"B", name = @"buttonEast")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Bumper", name = @"leftShoulder", shortDisplayName = @"LB")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Bumper", name = @"rightShoulder", shortDisplayName = @"RB")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", name = @"buttonWest")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", name = @"buttonNorth")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"leftTrigger", shortDisplayName = @"LT")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"rightTrigger", shortDisplayName = @"RT")] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        public XInputController.DeviceSubType subType { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl view { get; }
        public XInputController() {}
        protected override void FinishSetup();
        [System.Flags] public enum DeviceFlags
        {
            ForceFeedbackSupported = 1,
            NoNavigation = 16,
            PluginModulesSupported = 8,
            VoiceSupported = 4,
            Wireless = 2,
        }
        public enum DeviceSubType
        {
            ArcadePad = 19,
            ArcadeStick = 3,
            DancePad = 5,
            DrumKit = 8,
            FlightStick = 4,
            Gamepad = 1,
            Guitar = 6,
            GuitarAlternate = 7,
            GuitarBass = 11,
            Unknown = 0,
            Wheel = 2,
        }
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(LowLevel.XInputControllerWindowsState))] [UnityEngine.Scripting.Preserve] public class XInputControllerWindows : XInputController
    {
        public XInputControllerWindows() {}
    }
}

namespace UnityEngine.InputSystem.XR
{
    public struct Bone
    {
        public System.UInt32 parentBoneIndex { get; set; }
        public Vector3 position { get; set; }
        public Quaternion rotation { get; set; }
    }

    [UnityEngine.Scripting.Preserve] public class BoneControl : UnityEngine.InputSystem.InputControl<Bone>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"parentBoneIndex", offset = 0)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.IntegerControl parentBoneIndex { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Position", offset = 4)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control position { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Rotation", offset = 16)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rotation { get; }
        public BoneControl() {}
        protected override void FinishSetup();
        public override Bone ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Bone value, void* statePtr);
    }

    public struct Eyes
    {
        public Vector3 fixationPoint { get; set; }
        public float leftEyeOpenAmount { get; set; }
        public Vector3 leftEyePosition { get; set; }
        public Quaternion leftEyeRotation { get; set; }
        public float rightEyeOpenAmount { get; set; }
        public Vector3 rightEyePosition { get; set; }
        public Quaternion rightEyeRotation { get; set; }
    }

    [UnityEngine.Scripting.Preserve] public class EyesControl : UnityEngine.InputSystem.InputControl<Eyes>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"FixationPoint", offset = 56)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control fixationPoint { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyeOpenAmount", offset = 68)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl leftEyeOpenAmount { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyePosition", offset = 0)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyeRotation", offset = 12)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl leftEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyeOpenAmount", offset = 72)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl rightEyeOpenAmount { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyePosition", offset = 28)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyeRotation", offset = 40)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rightEyeRotation { get; }
        public EyesControl() {}
        protected override void FinishSetup();
        public override Eyes ReadUnprocessedValueFromState(void* statePtr);
        public override void WriteValueIntoState(Eyes value, void* statePtr);
    }

    public enum FeatureType
    {
        Axis1D = 3,
        Axis2D = 4,
        Axis3D = 5,
        Binary = 1,
        Bone = 8,
        Custom = 0,
        DiscreteStates = 2,
        Eyes = 9,
        Hand = 7,
        Rotation = 6,
    }

    [AddComponentMenu(@"XR/Tracked Pose Driver (New Input System)")] public class TrackedPoseDriver : MonoBehaviour
    {
        public InputAction positionAction { get; set; }
        public InputAction rotationAction { get; set; }
        public TrackedPoseDriver.TrackingType trackingType { get; set; }
        public TrackedPoseDriver.UpdateType updateType { get; set; }
        public TrackedPoseDriver() {}
        protected virtual void Awake();
        protected virtual void OnBeforeRender();
        protected virtual void OnDestroy();
        protected void OnEnable();
        protected virtual void OnUpdate();
        protected virtual void PerformUpdate();
        protected virtual void SetLocalTransform(Vector3 newPosition, Quaternion newRotation);
        protected void UpdateCallback();
        public enum TrackingType
        {
            PositionOnly = 2,
            RotationAndPosition = 0,
            RotationOnly = 1,
        }
        public enum UpdateType
        {
            BeforeRender = 2,
            Update = 1,
            UpdateAndBeforeRender = 0,
        }
    }

    public struct UsageHint
    {
        public string content;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"XR Controller", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class XRController : TrackedDevice
    {
        public static XRController leftHand { get; }
        public static XRController rightHand { get; }
        public XRController() {}
        protected override void FinishSetup();
    }

    [UnityEngine.Scripting.Preserve] public class XRControllerWithRumble : XRController
    {
        public XRControllerWithRumble() {}
        public void SendImpulse(float amplitude, float duration);
    }

    public class XRDeviceDescriptor
    {
        public UnityEngine.XR.InputDeviceCharacteristics characteristics;
        public int deviceId;
        public string deviceName;
        public System.Collections.Generic.List<XRFeatureDescriptor> inputFeatures;
        public string manufacturer;
        public string serialNumber;
        public XRDeviceDescriptor() {}
        public static XRDeviceDescriptor FromJson(string json);
        public string ToJson();
    }

    public struct XRFeatureDescriptor
    {
        public System.UInt32 customSize;
        public FeatureType featureType;
        public string name;
        public System.Collections.Generic.List<UsageHint> usageHints;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"XR HMD", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class XRHMD : TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl centerEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl leftEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rightEyeRotation { get; }
        public XRHMD() {}
        protected override void FinishSetup();
    }

    public static class XRUtilities
    {
        public const string InterfaceCurrent = @"XRInputV1";
        public const string InterfaceMatchAnyVersion = @"^(XRInput)";
        public const string InterfaceV1 = @"XRInput";
    }
}

namespace UnityEngine.InputSystem.XR.Haptics
{
    public struct BufferedRumble
    {
        public HapticCapabilities capabilities { get; }
        public BufferedRumble(InputDevice device) {}
        public void EnqueueRumble(byte[] samples);
    }

    public struct GetCurrentHapticStateCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public System.UInt32 samplesAvailable;
        public System.UInt32 samplesQueued;
        public HapticState currentState { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static GetCurrentHapticStateCommand Create();
    }

    public struct GetHapticCapabilitiesCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public System.UInt32 frequencyHz;
        public System.UInt32 maxBufferSize;
        public System.UInt32 numChannels;
        public HapticCapabilities capabilities { get; }
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static GetHapticCapabilitiesCommand Create();
    }

    public struct HapticCapabilities
    {
        public System.UInt32 frequencyHz { get; }
        public System.UInt32 maxBufferSize { get; }
        public System.UInt32 numChannels { get; }
        public HapticCapabilities(System.UInt32 numChannels, System.UInt32 frequencyHz, System.UInt32 maxBufferSize) {}
    }

    public struct HapticState
    {
        public System.UInt32 samplesAvailable { get; }
        public System.UInt32 samplesQueued { get; }
        public HapticState(System.UInt32 samplesQueued, System.UInt32 samplesAvailable) {}
    }

    public struct SendBufferedHapticCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static SendBufferedHapticCommand Create(byte[] rumbleBuffer);
    }

    public struct SendHapticImpulseCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static SendHapticImpulseCommand Create(int motorChannel, float motorAmplitude, float motorDuration);
    }
}

namespace UnityEngine.XR.WindowsMR.Input
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"HoloLens Hand")] [UnityEngine.Scripting.Preserve] public class HololensHand : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl airTap { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control sourceLossMitigationDirection { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl sourceLossRisk { get; }
        public HololensHand() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Windows MR Headset")] [UnityEngine.Scripting.Preserve] public class WMRHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Quaternion", name = @"deviceRotation")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Vector3", name = @"devicePosition")] [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl userPresence { get; }
        public WMRHMD() {}
        protected override void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Windows MR Controller")] [UnityEngine.Scripting.Preserve] public class WMRSpatialController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl batteryLevel { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control joystick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl joystickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control pointerPosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl pointerRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control sourceLossMitigationDirection { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl sourceLossRisk { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public WMRSpatialController() {}
        protected override void FinishSetup();
    }
}
